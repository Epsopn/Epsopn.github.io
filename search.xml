<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mac安装Hexo</title>
      <link href="/archives/71256fba.html"/>
      <url>/archives/71256fba.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class=" language-ruby"><code class="language-ruby">$ npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli</code></pre><a id="more"></a><p>这个安装的时候，我遇到了这样的报错：</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/B.jpg" alt loading="lazy"></p><p>而且在用</p><pre class=" language-ruby"><code class="language-ruby">$ hexo init</code></pre><p>这个时候，会出现command not found。命令未找到。</p><p>这报错的原因在于执行安装命令的时候我没有获取管理员权限。<br>请使用：</p><pre class=" language-ruby"><code class="language-ruby">$ sudo <span class="token operator">-</span>s</code></pre><p>获取管理员权限在重新安装hexo执行安装命令。</p><p>之后重启终端就可以正常使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC框架介绍</title>
      <link href="/archives/e2a11bfc.html"/>
      <url>/archives/e2a11bfc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-SpringMVC框架简介"><a href="#1-SpringMVC框架简介" class="headerlink" title="1. SpringMVC框架简介"></a>1. SpringMVC框架简介</h2><p>MVC = Model（数据模型） + View（视图） + Controller（控制器）</p><p>SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！</p><a id="more"></a><p>在传统的Java EE开发模式下，是使用Servlet组件作为项目的控制器，假设项目中有“用户注册”的功能，则可能需要创建<code>UserRegServlet</code>，如果还有“用户登录”功能，则可能需要创建<code>UserLoginServlet</code>，以此类推，每增加1个新的功能，就需要开发一个新的Servlet，如果某个项目中有100个功能，就需要开发100个Servlet，如果有500个功能，就需要开发500个Servlet！而且，每个Servlet可能还需要添加相关的配置，所以，一旦Servlet的数量过多，就会不利于管理和维护，并且，在服务器运行时，需要创建很多Servlet类的对象，会消耗较多的内存空间。</p><p>另外，Java EE的许多API并不简洁，在使用时并不是那么方便！</p><p>使用SpringMVC框架，以上问题都可以被解决！</p><h2 id="2-SpringMVC核心组件"><a href="#2-SpringMVC核心组件" class="headerlink" title="2. SpringMVC核心组件"></a>2. SpringMVC核心组件</h2><ul><li>DispatcherServlet：前端控制器，用于接收所有请求；</li><li>HandlerMapping：用于配置请求路径与Controller组件的对应关系；</li><li>Controller：控制器，具体处理请求的组件；</li><li>ModelAndView：Controller组件处理完请求后得到的结果，由数据与视图名称组成；</li><li>ViewResolver：视图解析器，可根据视图名称确定需要使用的视图组件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot简介</title>
      <link href="/archives/c35b400a.html"/>
      <url>/archives/c35b400a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1. SpringBoot简介"></a>1. SpringBoot简介</h2><p>SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。</p><p>SpringBoot的核心思想是<strong>约定大于配置</strong>，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将<code>DispatcherServlet</code>的映射路径配置为<code>/*</code>，则使用者就按照这个配置值使用即可，无须自已编写配置！</p><a id="more"></a><h2 id="2-使用SpringBoot开发用户注册登录"><a href="#2-使用SpringBoot开发用户注册登录" class="headerlink" title="2. 使用SpringBoot开发用户注册登录"></a>2. 使用SpringBoot开发用户注册登录</h2><h3 id="2-1-创建SpringBoot项目"><a href="#2-1-创建SpringBoot项目" class="headerlink" title="2.1. 创建SpringBoot项目"></a>2.1. 创建SpringBoot项目</h3><p>如果要创建SpringBoot项目，常规的创建方式有：</p><ul><li>基于SpringBoot的父级项目来创建新的项目；</li><li>使用开发工具的创建向导来创建；</li><li>从Spring网站创建项目并导入到本地开发工具中。</li></ul><p>本次使用以上介绍的第3种做法，首先，打开<code>https://start.spring.io/</code>网站，在网页中主要确定几项：</p><ul><li>所使用的SpringBoot版本；</li><li>Group与Artifact，相当于在Eclipse中创建Maven项目时指定的Group Id和Artifact Id；</li><li>强烈建议<strong>不要</strong>修改默认生成的Package name，默认值就是由填写的Group和Artifact值决定的；</li><li>确定使用jar或war；</li><li>添加必要的依赖。</li></ul><p>完成后，点击页面中的<strong>Generate</strong>按钮就可以开始生成项目并自动下载该项目！</p><p>解压下载得到的压缩包文件，将得到项目文件夹，为了便于管理项目，推荐将该文件夹移动到Workspace中，避免以后找不到这个项目了。</p><p>然后，在Eclipse中，通过<strong>Import</strong> &gt; <strong>Existing Maven Projects</strong>导入项目，默认的项目结构并不完整，可以暂且不管，后续项目更新完成后就会恢复正常，导入项目后，项目会开始自动下载所需的依赖，这个过程中只需要保证能够连接到Maven服务器，确保能下载所依赖的jar包，然后，等待即可，如果项目没有开始自动下载，对项目点右键，选择<strong>Maven</strong> &gt; <strong>Update Project</strong>更新即可。</p><blockquote><p>建议使用4.11及以上版本的Eclipse，如果使用的是较低版本的Eclipse，在pom.xml文件中可能报错，这是因为较低版本的Eclipse中内置的Maven配置版本较低导致的，而较高版本的Eclipse中内置的Maven配置版本较高，就不会出错，并且，即使出错，也不影响正常的开发和运行。</p></blockquote><h3 id="2-2-检查项目是否基本可用"><a href="#2-2-检查项目是否基本可用" class="headerlink" title="2.2. 检查项目是否基本可用"></a>2.2. 检查项目是否基本可用</h3><p>展开项目中的<strong>src/test/java</strong>，其中，已经存在<code>cn.tedu.sample</code>包，这个包的名称是创建项目时填写的Group和Artifact决定的，<strong>这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中</strong>！在包中已经存在<code>SampleApplicationTests</code>类，类中有<code>contextLoads()</code>方法，通过单元测试的方式，直接测试方法，如果能成功运行，则表示测试环境是正常的！</p><p>展开项目中的<strong>src/main/java</strong>，其中，已经存在<code>cn.tedu.sample</code>包，这个包的名称是创建项目时填写的Group和Artifact决定的，<strong>这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中</strong>！在包中已经存在<code>SampleApplication</code>类，它是项目的<strong>启动类</strong>，类中有<code>main()</code>方法，这个<code>main()</code>就是整个项目的启动方法。</p><h3 id="2-3-在项目中添加静态页面"><a href="#2-3-在项目中添加静态页面" class="headerlink" title="2.3. 在项目中添加静态页面"></a>2.3. 在项目中添加静态页面</h3><p>在SpringBoot项目中，在<strong>src/main/resources</strong>下，默认就存在<strong>static</strong>文件夹，这个文件就是SpringBoot项目用于存放静态资源（网页文件、css文件、js文件、图片文件等）的文件夹！</p><p>所以，可以在<strong>static</strong>文件夹下创建<strong>index.html</strong>文件，内容可以自行设计，完成后，启动项目，在浏览器中输入<code>http://localhost:8080/</code>即可访问。</p><p>因为SpringBoot框架内置了Tomcat，每个项目都有独立的Tomcat，在部署项目时，会将<code>Context Path</code>设置为<code>&quot;&quot;</code>，即空字符串，所以，在SpringBoot的启动日志中也会有：</p><pre><code>Tomcat started on port(s): 8080 (http) with context path &#39;&#39;</code></pre><p>所以，最后，在执行访问时，URL的端口号右侧不需要添加项目名称！</p><p>另外，<strong>index.html</strong>是默认的资源名称，所以，如果需要访问的就是这个资源，则URL中也不必显式的指定资源名。</p><p>在SpringBoot项目中，在<strong>src/main/resources</strong>下默认即存在<strong>application.properties</strong>文件，这个文件是整个项目的配置文件，后续相关的配置都需要写在这个文件中！例如，可以在该文件中添加配置：</p><pre><code>server.port=80</code></pre><p>就可以把Tomcat的端口号改为<code>80</code>，如果使用的是Windows操作系统，重新启动项目，通过<code>http://localhost/</code>即可访问刚才的页面，因为<code>80</code>端口是HTTP协议的默认端口，所以，当尝试提交HTTP请求时，如果没有显式的指定端口号，会视为尝试访问服务器的<code>80</code>端口！如果使用的是Mac OS或Linux操作系统，这些操作系统对80端口的使用是非常严格的，需要自行在操作系统中进行相关配置后，才允许使用80端口！</p><p><strong>注意：如果自行指定端口，推荐使用4位数甚至5位的端口号，因为2位数和3位数的许多端口号都被某些协议默认使用了，如果使用这些端口号，就会导致各服务产生冲突，某些服务将无法正常使用！</strong></p><p>另外，如果在SpringBoot项目中，还会使用到Thymeleaf等模版技术，应该将模版页面放在<strong>src/main/resources/templates/</strong>文件夹下。</p><h3 id="2-4-使用控制器接收客户端提交的请求"><a href="#2-4-使用控制器接收客户端提交的请求" class="headerlink" title="2.4. 使用控制器接收客户端提交的请求"></a>2.4. 使用控制器接收客户端提交的请求</h3><p>在<strong>src/main/java</strong>下的<code>cn.tedu.sample</code>包是SpringBoot项目默认组件扫描的根包，所以，在项目中创建的所有组件类（需要由Spring框架创建并管理的）必须放在这个包或其子包中！</p><p>在<code>cn.tedu.sample</code>包中创建<code>HelloController</code>控制器，在类的声明之前添加<code>@Controller</code>注解，并在类中添加处理请求的方法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>tedu<span class="token punctuation">.</span>sample<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> String <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"SpringBoot框架真好用！！！"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写完成后，重启项目，在浏览器中输入<code>http://localhost:8080/hello</code>即可请求到以上控制器中的资源！</p><p>SpringBoot项目默认已经配置了<code>DispatcherServlet</code>，并且，映射的路径是<code>/*</code>，所以，在配置请求路径时，并不要求路径中的资源是以<code>.do</code>作为后缀，同时，也就意味着当前项目中所有请求路径都会被SpringMVC框架所处理！</p><p>SpringBoot框架将所有内置的框架、开发环境中的编码已经全部设置为<code>UTF-8</code>了，所以，在使用SpringBoot时，默认都是可以直接支持中文的！</p><p>在编写控制器时，还可以使用一些新的注解：</p><ul><li><code>@RestController</code>：该注解可以用于替代此前使用的<code>@Controller</code>，使用该注解后，当前控制器类中所有的方法默认都是响应正文，相当于每个方法之前都添加了<code>@ResponseBody</code>，所以，可以简单的理解为<code>@RestController = @Controller + @ResponseBody</code>；</li><li><code>@GetMapping</code>：该注解相当于<code>@RequestMapping(method=RequestMethod.GET)</code>；</li><li><code>@PostMapping</code>：该注解相当于<code>@RequestMapping(method=RequestMethod.POST)</code>；</li></ul><p>以上注解并不是SpringBoot项目新增的，而是SpringMVC框架中本来就有的，但是，在传统的SpringMVC框架中，这些注解是不能直接使用的，需要另行配置，而SpringBoot默认已经完成了这些配置，所以，可以直接使用！</p><h3 id="2-5-配置数据库连接"><a href="#2-5-配置数据库连接" class="headerlink" title="2.5. 配置数据库连接"></a>2.5. 配置数据库连接</h3><p>在SpringBoot项目中，如果涉及数据库编程，需要自行添加数据库相关的依赖，虽然SpringBoot默认能集成绝大部分常规依赖，但是，它无法直接确定每个开发者使用的是哪种数据库、哪种数据库编程时使用的框架，所以，是需要自行添加的！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>当SpringBoot项目添加了数据库相关的依赖后，启动项目时，就会自动尝试读取数据库连接的配置信息，如果没有配置信息，则启动项目会报错！</p><p>所以，需要在<strong>application.properties</strong>中添加配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>添加以上配置后，就可以正常启动项目，但是，启动项目时，只会读取配置信息，并不会执行连接，所以，即使以上配置信息中存在错误的值，也不影响项目启动，同样，也不无法得知以上配置信息是否正确！</p><p>所以，接下来，需要尝试连接到数据库，以确认以上配置信息是否正确！可以在<strong>src/test/java</strong>中<code>cn.tedu.sample</code>中的<code>SampleApplicationTests</code>测试类编写并执行单元测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-实现注册相关的数据库编程"><a href="#2-6-实现注册相关的数据库编程" class="headerlink" title="2.6. 实现注册相关的数据库编程"></a>2.6. 实现注册相关的数据库编程</h3><p>首先，需要创建用户数据类，用于封装用户数据的属性，所以，在<strong>src/main/java</strong>的<code>cn.tedu.sample</code>包下创建<code>User</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>  <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 补充SET/GET方法，toString()方法</span><span class="token punctuation">}</span></code></pre><p>注册功能应该由2项数据操作所组成：先根据用户尝试注册的用户名查询数据，如果查询到某个结果，则表示该用户名已经被占用，不允许插入新的用户数据，如果查询不到结果，则该用户名没有被人占用，将用户尝试注册的信息插入到数据库中即可！所以，涉及操作分别是<strong>根据用户名查询用户数据</strong>和<strong>插入用户数据</strong>。</p><p>先<code>cn.tedu.sample</code>包中创建<code>UserMapper</code>接口，并在接口中添加抽象方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>tedu<span class="token punctuation">.</span>sample<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>  Integer <span class="token function">addnew</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  User <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>写完接口后，需要配置接口文件的位置，配置的做法可以是：</p><ul><li>在接口的声明之前添加<code>@Mapper</code>注解，使用这种做法，就要求每一个接口都需要添加该注解；</li><li>在启动类（<code>SampleApplication</code>）的声明之前，添加<code>@MapperScan(&quot;接口所在的包&quot;)</code>注解，然后，所有接口都放在配置的包中即可！</li></ul><p>一般推荐使用以上的第2种做法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.tedu.sample"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplication</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SampleApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，就需要配置各抽象方法对应的SQL语句，首先，还是在<strong>src/main/resources</strong>下创建<strong>mappers</strong>文件夹，并在该文件中粘贴得到<strong>UserMapper.xml</strong>，用于配置SQL语句。</p><p>在<strong>UserMapper.xml</strong>中配置SQL语句：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"       "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tedu.sample.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addnew<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO t_user (      username, password, age, phone, email    ) VALUES (      #{username}, #{password}, #{age}, #{phone}, #{email}    )  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tedu.sample.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM t_user WHERE username=#{username}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>在执行单元测试之前，还需要指定这些XML文件的位置，需要在<strong>application.properties</strong>中进行配置：</p><pre><code>mybatis.mapper-locations=classpath:mappers/*.xml</code></pre><p>最后，编写并执行单元测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplicationTests</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"lucy02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"13900139002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"lucy02@foxmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer rows <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">addnew</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rows="</span> <span class="token operator">+</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String username <span class="token operator">=</span> <span class="token string">"lucy"</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此，关于注册时涉及的数据库编程的相关功能就已经完成！</p><p>其实，还可以在抽象方法之前添加注解来配置SQL语句及相关内容，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user (username, password, age, phone, email) VALUES (#{username}, #{password}, #{age}, #{phone}, #{email})"</span><span class="token punctuation">)</span>  Integer <span class="token function">addnew</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM t_user WHERE username=#{username}"</span><span class="token punctuation">)</span>  User <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种做法也不是SpringBoot集成MyBatis才可以做到的，直接使用MyBatis也可以实现，但是，需要额外的配置，而SpringBoot已经完成了相关的配置，所以，可以直接使用！</p><h3 id="2-7-开发处理注册的控制器"><a href="#2-7-开发处理注册的控制器" class="headerlink" title="2.7. 开发处理注册的控制器"></a>2.7. 开发处理注册的控制器</h3><p>首先，需要创建封装返回结果的<code>JsonResult</code>类，在类中声明需要响应到客户端的JSON数据中的属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Integer state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>建议新创建<code>UserController</code>控制器类，在这个控制器类中处理请求：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"reg"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> JsonResult <span class="token function">reg</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    User result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      userMapper<span class="token punctuation">.</span><span class="token function">addnew</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完成后，重新启动项目，在浏览器中访问<code>http://localhost:8080/reg?username=david&amp;password=1234</code>执行测试。</p><h3 id="2-8-前端页面"><a href="#2-8-前端页面" class="headerlink" title="2.8. 前端页面"></a>2.8. 前端页面</h3><p>先从前序项目中复制<strong>reg.html</strong>和jQuery文件到<strong>static</strong>文件夹下。</p><p>为注册的表单设置ID值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-reg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>修改按钮：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reg()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>然后，引用jQuery文件，并编写代码以提交请求、处理结果：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.4.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"/reg"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token string">"dataType"</span><span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token string">"success"</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册失败！您尝试注册的用户名已经被占用！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天都干什么了？</title>
      <link href="/archives/ab8a344f.html"/>
      <url>/archives/ab8a344f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/qqq.jpg" alt loading="lazy"></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 问号问号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 许多的问号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架的介绍</title>
      <link href="/archives/89a211cf.html"/>
      <url>/archives/89a211cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-Spring框架简介"><a href="#1-Spring框架简介" class="headerlink" title="1. Spring框架简介"></a>1. Spring框架简介</h2><p>框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！</p><blockquote><p>在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！</p></blockquote><p>Spring框架主要是用于创建对象和管理对象的！</p><a id="more"></a><h4 id="使用Spring框架的原因"><a href="#使用Spring框架的原因" class="headerlink" title="使用Spring框架的原因"></a>使用Spring框架的原因</h4><p>Spring框架的主要作用之一就是创建对象，但是，创建对象本身是一件非常简单的事情，例如：</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，在实际开发项目时，一个项目中的类会非常多，需要创建的对象也非常多，并且，类与类之间的<strong>依赖</strong>会比较复杂，如果直接创建对象，会导致<strong>耦合度</strong>较高，不利于项目的管理和维护！</p><h4 id="Spring框架的优点都有什么？"><a href="#Spring框架的优点都有什么？" class="headerlink" title="Spring框架的优点都有什么？"></a>Spring框架的优点都有什么？</h4><ul><li><p>简化编程：Spring对JavaEE中的一些比较繁琐的API做了简化和封装，使用封装之后的API不仅代码更简洁，而且质量更高。</p></li><li><p>解耦：对象之间的依赖关系由容器来统一管理、降低了对象之间的耦合度、方便代码的维护，同时也实现了资源的统一调度和管理。</p></li><li><p>支持面向切面编程AOP：可以方便对程序添加通用的服务，比如事务、权限管理等。</p></li><li><p>集成其它框架：不发明重复的轮子，集成其它一些优秀框架、使开发者用统一的并且更加简洁的方式来使用这些框架。</p></li><li><p>轻量：可以依赖项目的实际要求，有选择的使用Spring框架的全部或者一部分。</p></li></ul><h2 id="2-通过Spring框架创建对象，并从中获取所需的对象"><a href="#2-通过Spring框架创建对象，并从中获取所需的对象" class="headerlink" title="2. 通过Spring框架创建对象，并从中获取所需的对象"></a>2. 通过Spring框架创建对象，并从中获取所需的对象</h2><p>新建一个Maven Project，在创建过程中，勾选中<strong>Create a simple project</strong>选项，在<strong>Group Id</strong>一栏输入<code>cn.tedu</code>，在<strong>Artifact Id</strong>一栏输入<code>spring01</code>，下方的<strong>Packaging</strong>选择<code>war</code>，刚创建好的项目因为没有<strong>web.xml</strong>文件会报错，生成该文件即可。</p><blockquote><p>在Packaing一栏也可以选择jar，并不一定必须选择war，后续会要求必须使用war，所以，提前体验也是可以的！</p></blockquote><p>打开项目的<strong>pom.xml</strong>文件，在其中添加Spring的依赖！在使用Spring框架时，需要添加的依赖是<code>spring-context</code>，具体代码是：</p><pre><code>&lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><blockquote><p>当需要查询某个依赖时，在浏览器中搜索“mvn”关键字，打开 <a href="http://www.mvnrepository.com" target="_blank" rel="noopener external nofollow noreferrer">http://www.mvnrepository.com</a> 网站，并搜索依赖的名称，在查询结果中找到匹配度最高的依赖，选择版本，就可以查询到依赖的代码。</p></blockquote><p>然后，将下载的Spring配置文件的压缩包解压，得到<strong>applicationContext.xml</strong>文件，这个文件就是Spring的配置文件，将它复制到项目的<strong>src/main/resources</strong>文件夹下！</p><blockquote><p>如果该文件提示错误，可以不处理，并不影响开发和运行！</p></blockquote><p>可以在Spring的配置文件中配置由Spring创建并管理的对象！</p><p>假设需要由Spring创建一个<code>Date</code>类的对象，则在该文件中添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id属性：自定义名称，后续将根据这个名称来获取对象，推荐使用类名将首字母改为小写 --></span><span class="token comment" spellcheck="true">&lt;!-- class属性：需要Spring框架创建哪个类的对象，取值是类的全名，即包名与类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>至此，已经配置好了需要由Spring管理的对象，后续，当该配置文件被加载时，Spring框架就会创建<code>java.util.Date</code>类的对象，开发人员也可以通过id属性值<code>date</code>获取该对象！</p>]]></content>
      
      
      <categories>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</title>
      <link href="/archives/218fe6f9.html"/>
      <url>/archives/218fe6f9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置"><a href="#Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置" class="headerlink" title="Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置"></a>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</h2><blockquote><h5 id="大致情况："><a href="#大致情况：" class="headerlink" title="大致情况："></a>大致情况：</h5></blockquote><p>刚刚用github成功解析了我的新域名，缺发现了这个错误</p><p><code>Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.</code></p><a id="more"></a><blockquote><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></blockquote><p>只需要在leancloud里面把你新的域名地址添加进来就ok了</p><p>在设置&gt;&gt;安全中心&gt;&gt;web安全域名</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/APIanquan.png" alt loading="lazy"> </p><p>这样问题就解决了。</p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次搭建博客</title>
      <link href="/archives/5ff0b802.html"/>
      <url>/archives/5ff0b802.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="第一次搭建博客遇到的问题"><a href="#第一次搭建博客遇到的问题" class="headerlink" title="第一次搭建博客遇到的问题"></a>第一次搭建博客遇到的问题</h4><blockquote><p><strong>身为小白的第一个搭建个人博客</strong>，中间的坑是在是太多了</p></blockquote><hr><a id="more"></a><p>由于对软件的不熟悉装载了<code>node.js14.1.0</code>版本导致了一直无法上传到git里面，查询了很多解决办法，因为是很新的版本，这个错误应该还没有遇到过。纠结了两天的时间，最后在群中得知，可能是版本过高导致，我又卸载装<code>v12</code>版本，果然两天没有搞定的错误就这样搞定了。</p><hr><p>接下来的就比较好弄了，一步一步的尝试写来，稀里糊涂的就做了个差不多，</p><blockquote><p>总结一句话：</p></blockquote><p><em>不到万不得已，最后不要升级，毕竟bug太多，没有前人踩路，容易摔死</em></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
