<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring的介绍2</title>
      <link href="/archives/e9e41cd3.html"/>
      <url>/archives/e9e41cd3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="3-Spring管理对象的作用域与生命周期"><a href="#3-Spring管理对象的作用域与生命周期" class="headerlink" title="3. Spring管理对象的作用域与生命周期"></a>3. Spring管理对象的作用域与生命周期</h2><h3 id="3-2-Spring管理对象的生命周期"><a href="#3-2-Spring管理对象的生命周期" class="headerlink" title="3.2. Spring管理对象的生命周期"></a>3.2. Spring管理对象的生命周期</h3><p>生命周期：某个对象从创建到最终销毁的整个历程！在整个生命周期历程中，会设计一些生命周期的“阶段”，约定这个“阶段”应该做哪些事情，Servlet中，就将Servlet的生命周期划分为<code>init()</code>、<code>service()</code>、<code>destroy()</code>这3大“阶段”，具体的表现为3个方法！与Servlet相似的这类的组件的特点是：开发人员只需要在编写代码时创建出对应的类，并重写其中指定的方法即可，并不需要自行创建类的对象，更不需要调用方法，最终，程序在运行起来后，方法会被自动的调用，例如Servlet组件就是由Tomcat容器创建的对象，并由Tomcat调用的其中的方法！由于类的创建、方法的调用都是由<a id="more"></a>Tomcat来完成的，所以，开发人员不必关心Servlet中的方法在几点几分几秒被调用，只知道某些会在满足什么条件时被调用，并决定被调用时应该如何处理数据，所以，在开发Servlet时，开发人员只需要重写对应的方法即可！总的来说，在讨论生命周期问题时，特定的组件（某些类）的创建过程、销毁过程，及其中某些方法的调用的主动权都不在开发人员手里，而是由某些容器进行管理的，开发人员就不必关心方法的调用时间，只需要关心特定的方法在哪种情景下会被调用，从而决定被调用时应该做哪些事情！生命周期在管理对象中的表现就是一个个的方法，在学习生命周期时，一定要了解这些方法在什么情景下被调用、调用多少次！</p><p>在学习Spring时，可以发现，所编写的类如果交给Spring来管理，由何时创建对象、何时销毁对象也不由开发人员来管理了！如果开发人员需要在整个对象的管理过程中添加一些管理方法，例如“在销毁之前释放某些资源”，则可以在类中添加创建和销毁时的生命周期方法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>tedu<span class="token punctuation">.</span>spring<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了User类的对象！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生命周期方法：初始化时执行的方法</span>    <span class="token comment" spellcheck="true">// 方法的声明：自定义名称，空参数列表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User.init()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生命周期方法：销毁之前执行的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User.destroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，还需要在Spring的配置文件中进行配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- init-method：初始化方法的名称 --></span><span class="token comment" spellcheck="true">&lt;!-- destroy-method：销毁方法的名称 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tedu.spring.User<span class="token punctuation">"</span></span>        <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>当运行时，可以发现：在执行了构造方法之后，就会自动调用初始化方法，在最终释放资源之前，就会执行销毁方法！</p><p>当编写了某个类由交Spring管理后，并不是必须声明并配置生命周期方法，仅在有需要的时候添加方法并配置即可，也不一定需要同时添加初始化和销毁这2个方法，完全可以只添加并配置其中的某1个，按需使用即可！</p>]]></content>
      
      
      <categories>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天都干什么了？</title>
      <link href="/archives/ab8a344f.html"/>
      <url>/archives/ab8a344f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌</p><img src="/archives/ab8a344f/a.jpg" class loading="lazy"><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 问号问号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 许多的问号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架的介绍</title>
      <link href="/archives/89a211cf.html"/>
      <url>/archives/89a211cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-Spring框架简介"><a href="#1-Spring框架简介" class="headerlink" title="1. Spring框架简介"></a>1. Spring框架简介</h2><p>框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！</p><blockquote><p>在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！</p></blockquote><p>Spring框架主要是用于创建对象和管理对象的！</p><h4 id="使用Spring框架的原因"><a href="#使用Spring框架的原因" class="headerlink" title="使用Spring框架的原因"></a>使用Spring框架的原因</h4><p>Spring框架的主要作用之一就是创建对象，但是，创建对象本身是一件非常简单的事情，例如：</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，在实际开发项目时，一个项目中的类会非常多，需要创建的对象也非常多，并且，类与类之间的<strong>依赖</strong>会比较复杂，如果直接创建对象，会导致<strong>耦合度</strong>较高，不利于项目的管理和维护！</p><h4 id="Spring框架的优点都有什么？"><a href="#Spring框架的优点都有什么？" class="headerlink" title="Spring框架的优点都有什么？"></a>Spring框架的优点都有什么？</h4><ul><li><p>简化编程：Spring对JavaEE中的一些比较繁琐的API做了简化和封装，使用封装之后的API不仅代码更简洁，而且质量更高。</p></li><li><p>解耦：对象之间的依赖关系由容器来统一管理、降低了对象之间的耦合度、方便代码的维护，同时也实现了资源的统一调度和管理。</p></li><li><p>支持面向切面编程AOP：可以方便对程序添加通用的服务，比如事务、权限管理等。</p></li><li><p>集成其它框架：不发明重复的轮子，集成其它一些优秀框架、使开发者用统一的并且更加简洁的方式来使用这些框架。</p></li><li><p>轻量：可以依赖项目的实际要求，有选择的使用Spring框架的全部或者一部分。</p></li></ul><h2 id="2-通过Spring框架创建对象，并从中获取所需的对象"><a href="#2-通过Spring框架创建对象，并从中获取所需的对象" class="headerlink" title="2. 通过Spring框架创建对象，并从中获取所需的对象"></a>2. 通过Spring框架创建对象，并从中获取所需的对象</h2><p>新建一个Maven Project，在创建过程中，勾选中<strong>Create a simple project</strong>选项，在<strong>Group Id</strong>一栏输入<code>cn.tedu</code>，在<strong>Artifact Id</strong>一栏输入<code>spring01</code>，下方的<strong>Packaging</strong>选择<code>war</code>，刚创建好的项目因为没有<strong>web.xml</strong>文件会报错，生成该文件即可。</p><blockquote><p>在Packaing一栏也可以选择jar，并不一定必须选择war，后续会要求必须使用war，所以，提前体验也是可以的！</p></blockquote><p>打开项目的<strong>pom.xml</strong>文件，在其中添加Spring的依赖！在使用Spring框架时，需要添加的依赖是<code>spring-context</code>，具体代码是：</p><pre><code>&lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><blockquote><p>当需要查询某个依赖时，在浏览器中搜索“mvn”关键字，打开 <a href="http://www.mvnrepository.com" target="_blank" rel="noopener external nofollow noreferrer">http://www.mvnrepository.com</a> 网站，并搜索依赖的名称，在查询结果中找到匹配度最高的依赖，选择版本，就可以查询到依赖的代码。</p></blockquote><p>然后，将下载的Spring配置文件的压缩包解压，得到<strong>applicationContext.xml</strong>文件，这个文件就是Spring的配置文件，将它复制到项目的<strong>src/main/resources</strong>文件夹下！</p><blockquote><p>如果该文件提示错误，可以不处理，并不影响开发和运行！</p></blockquote><p>可以在Spring的配置文件中配置由Spring创建并管理的对象！</p><p>假设需要由Spring创建一个<code>Date</code>类的对象，则在该文件中添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id属性：自定义名称，后续将根据这个名称来获取对象，推荐使用类名将首字母改为小写 --></span><span class="token comment" spellcheck="true">&lt;!-- class属性：需要Spring框架创建哪个类的对象，取值是类的全名，即包名与类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>至此，已经配置好了需要由Spring管理的对象，后续，当该配置文件被加载时，Spring框架就会创建<code>java.util.Date</code>类的对象，开发人员也可以通过id属性值<code>date</code>获取该对象！</p>]]></content>
      
      
      <categories>
          
          <category> JavaSpring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSpring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</title>
      <link href="/archives/218fe6f9.html"/>
      <url>/archives/218fe6f9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置"><a href="#Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置" class="headerlink" title="Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置"></a>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</h2><blockquote><h5 id="大致情况："><a href="#大致情况：" class="headerlink" title="大致情况："></a>大致情况：</h5></blockquote><p>刚刚用github成功解析了我的新域名，缺发现了这个错误</p><p><code>Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.</code></p><a id="more"></a><blockquote><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></blockquote><p>只需要在leancloud里面把你新的域名地址添加进来就ok了</p><p>在设置&gt;&gt;安全中心&gt;&gt;web安全域名</p><img src="/archives/218fe6f9/qq.png" class loading="lazy"><p>这样问题就解决了。</p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次搭建博客</title>
      <link href="/archives/5ff0b802.html"/>
      <url>/archives/5ff0b802.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="第一次搭建博客遇到的问题"><a href="#第一次搭建博客遇到的问题" class="headerlink" title="第一次搭建博客遇到的问题"></a>第一次搭建博客遇到的问题</h4><blockquote><p><strong>身为小白的第一个搭建个人博客</strong>，中间的坑是在是太多了</p></blockquote><hr><a id="more"></a><p>由于对软件的不熟悉装载了<code>node.js14.1.0</code>版本导致了一直无法上传到git里面，查询了很多解决办法，因为是很新的版本，这个错误应该还没有遇到过。纠结了两天的时间，最后在群中得知，可能是版本过高导致，我又卸载装<code>v12</code>版本，果然两天没有搞定的错误就这样搞定了。</p><hr><p>接下来的就比较好弄了，一步一步的尝试写来，稀里糊涂的就做了个差不多，</p><blockquote><p>总结一句话：</p></blockquote><p><em>不到万不得已，最后不要升级，毕竟bug太多，没有前人踩路，容易摔死</em></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
