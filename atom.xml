<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿呆の小客栈</title>
  
  <subtitle>z-p</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.epsopn.top/"/>
  <updated>2022-06-09T16:22:29.388Z</updated>
  <id>https://www.epsopn.top/</id>
  
  <author>
    <name>阿呆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的HTTP响应状态码</title>
    <link href="https://www.epsopn.top/archives/5aa59435.html"/>
    <id>https://www.epsopn.top/archives/5aa59435.html</id>
    <published>2020-05-30T14:52:10.000Z</published>
    <updated>2022-06-09T16:22:29.388Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="HTTP状态码（HTTP-Status-codes）简介"><a href="#HTTP状态码（HTTP-Status-codes）简介" class="headerlink" title="HTTP状态码（HTTP Status codes）简介"></a>HTTP状态码（HTTP Status codes）简介</h1><h2 id="HTTP与Status-codes"><a href="#HTTP与Status-codes" class="headerlink" title="HTTP与Status codes"></a>HTTP与Status codes</h2><pre><code>HTTP可能大家都熟悉，就是超文本传输协议。浏览器通过HTTP与WEB Server通讯（也有一些其它软件比如IM使用HTTP协议传递数据），把我们的请求（HTTP Request）传递给服务器，服务器响应这个请求，返回应答（HTTP Response）以及我们需要的数据。大致就是这个样子了。如果我们请求啥，服务器就返回啥，是乎就不需要HTTP Status codes了。但是事情往往不是那么简单。比如我们请求一个网页页面，可是服务器不存在这个页面，或者这个页面被转移到其它地方，或者服务器禁止我们查看 这个页面等等，所以为了便于浏览器处理这些正确与不正确的情况，HTTP用Status codes来表示请求（HTTP Request）在服务器端被处理的情况。Status codes通过应答（HTTP Response）返回给浏览器，浏览器根据这个作相应的处理。</code></pre><pre class=" language-http"><code class="language-http">注：1960年美国人Ted Nelson构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了HTTP超文本传输协议标准架构的发展根基。HTTP的发展是万维网协会（World Wide Web Consortium）和Internet工作小组（Internet Engineering Task Force）合作的结果，（他们）最终发布了一系列的RFC，其中最著名的就是RFC 2616。</code></pre><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><pre><code>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字有分类的作用。不同的状态码代表不同的含义。</code></pre><p><code>它由 RFC 2616 规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 与 RFC 4918 等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。所示的消息短语是典型的，但是可以提供任何可读取的替代方案。 除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</code></p><pre class=" language-http"><code class="language-http">注：Request For Comments（RFC），是一系列以编号排定的文件。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件。目前RFC文件是由Internet Society（ISOC）赞助发行。基本的互联网通信协议都有在RFC文件内详细说明。RFC文件还额外加入许多的论题在标准内，例如对于互联网新开发的协议及发展中所有的记录。因此几乎所有的互联网标准都有收录在RFC文件之中。</code></pre><h2 id="HTTP-Status-codes的分类"><a href="#HTTP-Status-codes的分类" class="headerlink" title="HTTP Status codes的分类"></a>HTTP Status codes的分类</h2><h5 id="既然有正确和错误的状态，HTTP定义两大类状态码是不是就可以了？人家制订协议的可是专家（不像我这种菜鸟），想得比我们要周全，要长远。HTTP-1-1中定义了5大类Status-codes，分别是："><a href="#既然有正确和错误的状态，HTTP定义两大类状态码是不是就可以了？人家制订协议的可是专家（不像我这种菜鸟），想得比我们要周全，要长远。HTTP-1-1中定义了5大类Status-codes，分别是：" class="headerlink" title="既然有正确和错误的状态，HTTP定义两大类状态码是不是就可以了？人家制订协议的可是专家（不像我这种菜鸟），想得比我们要周全，要长远。HTTP 1.1中定义了5大类Status codes，分别是："></a>既然有正确和错误的状态，HTTP定义两大类状态码是不是就可以了？人家制订协议的可是专家（不像我这种菜鸟），想得比我们要周全，要长远。HTTP 1.1中定义了5大类Status codes，分别是：</h5><pre class=" language-tex"><code class="language-tex">1xx：临时响应（Informational），需要请求者继续执行操作的状态代码，表示服务器正在接受请求。2xx：成功状态码（Success），已成功接受客户端请求。3xx：重定向状态码（Redirection），需要客户端做进一步操作来完成请求。4xx：客户端错误（Client Error），客户端请求出错导致服务端无法正常完成请求。5xx：服务端错误（Server Error），服务器出错未能成功处理服务端请求。</code></pre><h2 id="常见的HTTP响应码"><a href="#常见的HTTP响应码" class="headerlink" title="常见的HTTP响应码"></a>常见的HTTP响应码</h2><h5 id="请求收到，继续处理："><a href="#请求收到，继续处理：" class="headerlink" title="请求收到，继续处理："></a>请求收到，继续处理：</h5><ul><li><code>100</code>：客户端必须继续发出请求</li><li><code>101</code>：客户端要求服务器根据请求转换HTTP协议版本</li></ul><h5 id="操作成功-收到-分析-接受："><a href="#操作成功-收到-分析-接受：" class="headerlink" title="操作成功/收到/分析/接受："></a>操作成功/收到/分析/接受：</h5><ul><li><code>200</code>：正确；</li><li><code>201</code>：提示知道新文件的URL；</li><li><code>202</code>：表示服务器已经接受了请求，但是还没有处理，而且这个请求最终会不会处理还不确定；</li><li><code>203</code>：返回信息不确定或不完整；</li><li><code>204</code>：请求收到，但返回信息为空；</li><li><code>205</code>：服务器完成了请求，用户代理必须复位当前已经浏览过的文件；</li><li><code>206</code>：服务器已经完成了部分用户的GET请求；</li></ul><h5 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h5><ul><li><p><code>300</code>：请求的资源可在多处得到；</p></li><li><p><code>301</code>：永久重定向，在Location响应首部的值仍为当前URL(隐式重定向)，（静态重定向）；</p></li><li><p><code>302</code>：临时重定向，在Location响应首部的值仍为新的URL(显示重定向)，（动态重定向）；</p></li></ul><h5 id="客户端错误："><a href="#客户端错误：" class="headerlink" title="客户端错误："></a>客户端错误：</h5><ul><li><code>400</code>：提交的请求参数不正确，可能是参数格式不正确，或没有提交必要的参数；</li><li><code>404</code>：尝试请求的资源不存在；</li><li><code>405</code>：请求方式错误；</li></ul><h5 id="服务器端错误"><a href="#服务器端错误" class="headerlink" title="服务器端错误:"></a>服务器端错误:</h5><ul><li><code>500</code>：服务器内部错误，一般在开发环境的控制台会有错误信息；</li><li><code>501</code>：未实现。服务器不识别该请求方法，或者服务器没有能力完成请求；</li><li><code>503</code>：服务不可用。服务器当前不可用(过载或故障)。</li><li></li></ul><h2 id="附1：常见的HTTP响应码"><a href="#附1：常见的HTTP响应码" class="headerlink" title="附1：常见的HTTP响应码"></a>附1：常见的HTTP响应码</h2><pre class=" language-java"><code class="language-java">请求收到，继续处理：                <span class="token number">100</span>      客户端必须继续发出请求                <span class="token number">101</span>      客户端要求服务器根据请求转换HTTP协议版本         操作成功收到，分析，接受：                <span class="token number">200</span>      交易成功                <span class="token number">201</span>      提示知道新文件的URL                <span class="token number">202</span>      接受和处理、但处理未完成                <span class="token number">203</span>      返回信息不确定或不完整                <span class="token number">204</span>      请求收到，但返回信息为空                <span class="token number">205</span>      服务器完成了请求，用户代理必须复位当前已经浏览过的文件                <span class="token number">206</span>      服务器已经完成了部分用户的GET请求         重定向：                <span class="token number">300</span>      请求的资源可在多处得到                <span class="token number">301</span>      永久重定向，在Location响应首部的值仍为当前<span class="token function">URL</span><span class="token punctuation">(</span>隐式重定向<span class="token punctuation">)</span>                <span class="token number">302</span>      临时重定向，在Location响应首部的值仍为新的<span class="token function">URL</span><span class="token punctuation">(</span>显示重定向<span class="token punctuation">)</span>                <span class="token number">303</span>      建议客户端访问其他URL或访问方式                <span class="token number">304</span>      Not Modified 请求的资源没有改变 可以继续使用缓存                <span class="token number">305</span>      请求的资源必须从服务器指定的地址得到                <span class="token number">306</span>      前一版本HTTP中使用的代码，现行版本中不再使用                <span class="token number">307</span>      声明请求的资源临时性删除         客户端错误：                <span class="token number">400</span>      错误请求，如语法错误                <span class="token number">401</span>      未授权                   HTTP <span class="token number">401.1</span>    未授权，登录失败                   HTTP <span class="token number">401.2</span>    未授权，服务器配置问题导致登录失败                   HTTP <span class="token number">401.3</span>    ACL  禁止访问资源                   HTTP <span class="token number">401.4</span>    未授权  授权被筛选器拒绝                   HTTP <span class="token number">401.5</span>    未授权  ISAPI或CGI授权失败                <span class="token number">402</span>      保留有效ChargeTo头响应                <span class="token number">403</span>      禁止访问                   HTTP <span class="token number">403.1</span>    禁止访问  禁止可执行访问                   HTTP <span class="token number">403.2</span>    禁止访问  禁止读访问                   HTTP <span class="token number">403.3</span>    禁止访问  禁止写访问                   HTTP <span class="token number">403.4</span>    禁止访问  要求SSL                   HTTP <span class="token number">403.5</span>    禁止访问  要求SSL <span class="token number">128</span>                   HTTP <span class="token number">403.6</span>    禁止访问  IP地址被拒绝                   HTTP <span class="token number">403.7</span>    禁止访问  要求客户端证书                   HTTP <span class="token number">403.8</span>    禁止访问  禁止站点访问                   HTTP <span class="token number">403.9</span>    禁止访问  连接的用户过多                   HTTP <span class="token number">403.10</span>   禁止访问  配置无效                   HTTP <span class="token number">403.11</span>   禁止访问  密码更改                   HTTP <span class="token number">403.12</span>   禁止访问  映射器拒绝访问                   HTTP <span class="token number">403.13</span>   禁止访问  客户端证书已被吊销                   HTTP <span class="token number">403.15</span>   禁止访问  客户端访问许可过多                   HTTP <span class="token number">403.16</span>   禁止访问  客户端证书不可信或者无效                   HTTP <span class="token number">403.17</span>   禁止访问  客户端证书已经到期或者尚未生效                <span class="token number">404</span>       没有发现文件、查询或URL                <span class="token number">405</span>       用户在Request<span class="token operator">-</span>Line字段定义的方法不允许                <span class="token number">406</span>       根据用户发送的Accept拖，请求资源不可访问                <span class="token number">407</span>       类似<span class="token number">401</span>，用户必须首先在代理服务器上得到授权                <span class="token number">408</span>       客户端没有在用户指定的饿时间内完成请求                <span class="token number">409</span>       对当前资源状态，请求不能完成                <span class="token number">410</span>       服务器上不再有此资源且无进一步的参考地址                <span class="token number">411</span>       服务器拒绝用户定义的Content<span class="token operator">-</span>Length属性请求                   <span class="token number">412</span>       一个或多个请求头字段在当前请求中错误                <span class="token number">413</span>       请求的资源大于服务器允许的大小                <span class="token number">414</span>       请求的资源URL长于服务器允许的长度                <span class="token number">415</span>       请求资源不支持请求项目格式                <span class="token number">416</span>       请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，       请求也不包含If<span class="token operator">-</span>Range请求头字段                <span class="token number">417</span>       服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长         服务器端错误<span class="token operator">:</span>                 <span class="token number">500</span> <span class="token operator">-</span> 内部服务器错误                   HTTP <span class="token number">500.100</span> <span class="token operator">-</span> 内部服务器错误                    HTTP <span class="token number">500</span><span class="token operator">-</span><span class="token number">11</span> 服务器关闭                   HTTP <span class="token number">500</span><span class="token operator">-</span><span class="token number">12</span> 应用程序重新启动                   HTTP <span class="token number">500</span><span class="token operator">-</span><span class="token number">13</span> <span class="token operator">-</span> 服务器太忙                   HTTP <span class="token number">500</span><span class="token operator">-</span><span class="token number">14</span> <span class="token operator">-</span> 应用程序无效                   HTTP <span class="token number">500</span><span class="token operator">-</span><span class="token number">15</span> <span class="token operator">-</span> 不允许请求                 <span class="token number">501</span> <span class="token operator">-</span> 未实现                <span class="token number">502</span> <span class="token operator">-</span> 网关错误                <span class="token number">503</span> <span class="token operator">-</span> 服务不可用                <span class="token number">504</span> <span class="token operator">-</span> 网关超时</code></pre><h2 id="附2：HTTP状态码列表"><a href="#附2：HTTP状态码列表" class="headerlink" title="附2：HTTP状态码列表"></a>附2：HTTP状态码列表</h2><table><thead><tr><th align="center"><strong>状态码</strong></th><th align="left"><strong>状态码英文名称</strong></th><th align="left"><strong>中文描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>100</strong></td><td align="left"><strong>Continue</strong></td><td align="left"><strong>继续。客户端应继续其请求</strong></td></tr><tr><td align="center"><strong>101</strong></td><td align="left"><strong>Switching Protocols</strong></td><td align="left"><strong>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</strong></td></tr><tr><td align="center"></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><strong>200</strong></td><td align="left"><strong>OK</strong></td><td align="left"><strong>请求成功。一般用于GET与POST请求</strong></td></tr><tr><td align="center"><strong>201</strong></td><td align="left"><strong>Created</strong></td><td align="left"><strong>已创建。成功请求并创建了新的资源</strong></td></tr><tr><td align="center"><strong>202</strong></td><td align="left"><strong>Accepted</strong></td><td align="left"><strong>已接受。已经接受请求，但未处理完成</strong></td></tr><tr><td align="center"><strong>203</strong></td><td align="left"><strong>Non-Authoritative Information</strong></td><td align="left"><strong>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</strong></td></tr><tr><td align="center"><strong>204</strong></td><td align="left"><strong>No Content</strong></td><td align="left"><strong>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</strong></td></tr><tr><td align="center"><strong>205</strong></td><td align="left"><strong>Reset Content</strong></td><td align="left"><strong>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</strong></td></tr><tr><td align="center"><strong>206</strong></td><td align="left"><strong>Partial Content</strong></td><td align="left"><strong>部分内容。服务器成功处理了部分GET请求</strong></td></tr><tr><td align="center"></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><strong>300</strong></td><td align="left"><strong>Multiple Choices</strong></td><td align="left"><strong>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</strong></td></tr><tr><td align="center"><strong>301</strong></td><td align="left"><strong>Moved Permanently</strong></td><td align="left"><strong>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</strong></td></tr><tr><td align="center"><strong>302</strong></td><td align="left"><strong>Found</strong></td><td align="left"><strong>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</strong></td></tr><tr><td align="center"><strong>303</strong></td><td align="left"><strong>See Other</strong></td><td align="left"><strong>查看其它地址。与301类似。使用GET和POST请求查看</strong></td></tr><tr><td align="center"><strong>304</strong></td><td align="left"><strong>Not Modified</strong></td><td align="left"><strong>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</strong></td></tr><tr><td align="center"><strong>305</strong></td><td align="left"><strong>Use Proxy</strong></td><td align="left"><strong>使用代理。所请求的资源必须通过代理访问</strong></td></tr><tr><td align="center"><strong>306</strong></td><td align="left"><strong>Unused</strong></td><td align="left"><strong>已经被废弃的HTTP状态码</strong></td></tr><tr><td align="center"><strong>307</strong></td><td align="left"><strong>Temporary Redirect</strong></td><td align="left"><strong>临时重定向。与302类似。使用GET请求重定向</strong></td></tr><tr><td align="center"></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><strong>400</strong></td><td align="left"><strong>Bad Request</strong></td><td align="left"><strong>客户端请求的语法错误，服务器无法理解</strong></td></tr><tr><td align="center"><strong>401</strong></td><td align="left"><strong>Unauthorized</strong></td><td align="left"><strong>请求要求用户的身份认证</strong></td></tr><tr><td align="center"><strong>402</strong></td><td align="left"><strong>Payment Required</strong></td><td align="left"><strong>保留，将来使用</strong></td></tr><tr><td align="center"><strong>403</strong></td><td align="left"><strong>Forbidden</strong></td><td align="left"><strong>服务器理解请求客户端的请求，但是拒绝执行此请求</strong></td></tr><tr><td align="center"><strong>404</strong></td><td align="left"><strong>Not Found</strong></td><td align="left"><strong>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</strong></td></tr><tr><td align="center"><strong>405</strong></td><td align="left"><strong>Method Not Allowed</strong></td><td align="left"><strong>客户端请求中的方法被禁止</strong></td></tr><tr><td align="center"><strong>406</strong></td><td align="left"><strong>Not Acceptable</strong></td><td align="left"><strong>服务器无法根据客户端请求的内容特性完成请求</strong></td></tr><tr><td align="center"><strong>407</strong></td><td align="left"><strong>Proxy Authentication Required</strong></td><td align="left"><strong>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</strong></td></tr><tr><td align="center"><strong>408</strong></td><td align="left"><strong>Request Time-out</strong></td><td align="left"><strong>服务器等待客户端发送的请求时间过长，超时</strong></td></tr><tr><td align="center"><strong>409</strong></td><td align="left"><strong>Conflict</strong></td><td align="left"><strong>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</strong></td></tr><tr><td align="center"><strong>410</strong></td><td align="left"><strong>Gone</strong></td><td align="left"><strong>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</strong></td></tr><tr><td align="center"><strong>411</strong></td><td align="left"><strong>Length Required</strong></td><td align="left"><strong>服务器无法处理客户端发送的不带Content-Length的请求信息</strong></td></tr><tr><td align="center"><strong>412</strong></td><td align="left"><strong>Precondition Failed</strong></td><td align="left"><strong>客户端请求信息的先决条件错误</strong></td></tr><tr><td align="center"><strong>413</strong></td><td align="left"><strong>Request Entity Too Large</strong></td><td align="left"><strong>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</strong></td></tr><tr><td align="center"><strong>414</strong></td><td align="left"><strong>Request-URI Too Large</strong></td><td align="left"><strong>请求的URI过长（URI通常为网址），服务器无法处理</strong></td></tr><tr><td align="center"><strong>415</strong></td><td align="left"><strong>Unsupported Media Type</strong></td><td align="left"><strong>服务器无法处理请求附带的媒体格式</strong></td></tr><tr><td align="center"><strong>416</strong></td><td align="left"><strong>Requested range not satisfiable</strong></td><td align="left"><strong>客户端请求的范围无效</strong></td></tr><tr><td align="center"><strong>417</strong></td><td align="left"><strong>Expectation Failed</strong></td><td align="left"><strong>服务器无法满足Expect的请求头信息</strong></td></tr><tr><td align="center"></td><td align="left"></td><td align="left"></td></tr><tr><td align="center"><strong>500</strong></td><td align="left"><strong>Internal Server Error</strong></td><td align="left"><strong>服务器内部错误，无法完成请求</strong></td></tr><tr><td align="center"><strong>501</strong></td><td align="left"><strong>Not Implemented</strong></td><td align="left"><strong>服务器不支持请求的功能，无法完成请求</strong></td></tr><tr><td align="center"><strong>502</strong></td><td align="left"><strong>Bad Gateway</strong></td><td align="left"><strong>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</strong></td></tr><tr><td align="center"><strong>503</strong></td><td align="left"><strong>Service Unavailable</strong></td><td align="left"><strong>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</strong></td></tr><tr><td align="center"><strong>504</strong></td><td align="left"><strong>Gateway Time-out</strong></td><td align="left"><strong>充当网关或代理的服务器，未及时从远端服务器获取请求</strong></td></tr><tr><td align="center"><strong>505</strong></td><td align="left"><strong>HTTP Version not supported</strong></td><td align="left"><strong>服务器不支持请求的HTTP协议的版本，无法完成处理</strong></td></tr></tbody></table><h2 id="附加：IT冷知识"><a href="#附加：IT冷知识" class="headerlink" title="附加：IT冷知识"></a>附加：IT冷知识</h2><h5 id="01"><a href="#01" class="headerlink" title="01"></a>01</h5><p>第一台电脑为蒸汽驱动</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/wendangtupian@master/1698e8057ef91833.jpg" alt></p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590857706288&di=26b9e2c9f897de8cb4b56cebd5cecfb6&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fbaike%2Fpic%2Fitem%2Ff99dcf004b4b7308738b6521.jpg" alt></p><p>作为公认的编程之父，Charles Babbage（查尔斯．巴贝奇）发明了世界上首批计算机之一。他将这台新设备称为分析引擎。其体积超过一栋房屋，由六台蒸汽机驱动并使用打孔卡进行编程。分析引擎有四大主要组成部分：1.转盘——相当于现代计算机中的CPU；2.存储——相当于现代计算机中的内存与存储介质；3.读取器——相当于输入机制；4.打印机——用于实现信息输出。</p><h5 id="02"><a href="#02" class="headerlink" title="02"></a>02</h5><p>电脑病毒的设计初衷并非是造成损害</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/wendangtupian@master/1698e8057f9126f8.jpg" alt></p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/wendangtupian@master/267f9e2f070828388e79920bb599a9014c08f1bd.jpeg" alt></p><p>史上第一款电脑病毒，竟然是由防御技术专家Fred Cohen(弗雷德·科恩)亲手设计出来的。他创造电脑病毒的目的仅仅是为了证明程序对电脑感染的可行性，从未希望借此对电脑造成任何危害。但这款程序却能够对电脑进行感染，并且能通过软盘等移动介质在不同计算机之间进行传播，因而命名为病毒。后来，他又创造出一种主动式电脑病毒，主要目的是帮助电脑用户找到未受感染可执行文件。</p><h5 id="03"><a href="#03" class="headerlink" title="03"></a>03</h5><p>第一位程序员是位女性</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/wendangtupian@master/4bed2e738bd4b31cd761a7feb669ac7b9f2ff85d.jpeg" alt></p><p>第一个程序员其实是个女的，这也是令人非常惊讶的，现在的IT行业大多都是男性，各大高校这一专业班上也大部分都是男生，所以感到奇怪也是正常的事情，这位女性是来自英国的数学家。</p><h5 id="04"><a href="#04" class="headerlink" title="04"></a>04</h5><p>程序中bug的名称源自“虫子”</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/wendangtupian@master/1698e805a3843825.jpg" alt></p><p>在程序中bug一词用于技术错误。这一术语最初由爱迪生在1878年提出的，但当时并没有流行起来。在这的几年之后，美国上将Grace Hopper(葛丽丝·霍普)在她的日志本中，写下了她在Mark II电脑上发现的一项bug。不过实际上，她说的真的是“虫子”问题，因为一只蛾子被困在电脑的继电器中，导致电脑的操作无法正常运行。如图片所见，她写道“这是我在电脑上发现的第一个bug”。</p><pre><code>1946 年，霍普发现了第一个电脑上的 bug。在 Mark II 计算机上工作时，电脑不能正常运作了，霍普和整个团队都搞不清楚为什么。后来才发现，是一只飞蛾意外飞入了一台电脑内部而引起的故障。终于把问题解除了，霍普在日记本中记录下了这一事件。</code></pre><h4 id="”千年虫“事件："><a href="#”千年虫“事件：" class="headerlink" title="”千年虫“事件："></a>”千年虫“事件：</h4><p>​        计算机2000年问题，又叫做“千年虫”、“电脑千禧年千年虫问题”或“千年危机”。</p><p>​        由于其中的年份只使用两位十进制数来表示，因此当系统进行（或涉及到）跨世纪的日期处理运算时（如多个日期之间的计算或比较等），就会出现错误的结果，进而引发各种各样的系统功能紊乱甚至崩溃。因此从根本上说千年虫是一种程序处理日期上的bug（计算机程序故障），而非病毒。</p><p>​        “千年虫”问题的根源始于60年代。当时计算机存储器的成本很高，如果用四位数字表示年份，就要多占用<strong>存储器空间</strong>，就会使<strong>成本增加</strong>，因此为了<strong>节省存储空间</strong>，计算机系统的<a href="https://baike.baidu.com/item/编程">编程</a>人员采用<strong>两位数字</strong>表示<strong>年份</strong>。随着计算机技术的迅猛发展，虽然后来<strong>存储器的价格降低了</strong>， 但在计算机系统中使用<strong>两位数字</strong>来表示年份的做法却由于思维上的<strong>惯性势力而被沿袭下来</strong>， 年复一年，直到新世纪即将来临之际，大家才突然意识到用两位数字表示年份将无法正确辨识<strong>公元2000年及其以后的年份</strong>。1997年，信息界开始拉起了“千年虫”警钟，并很快引起了全球关注。</p><h4 id="受到的影响"><a href="#受到的影响" class="headerlink" title="受到的影响"></a>受到的影响</h4><h5 id="金融业"><a href="#金融业" class="headerlink" title="金融业"></a>金融业</h5><p>到了2000年，银行里面的电脑可能将2000年解释为1900年，引 起利息计算上的混乱，甚至自动将所有的记录消除；自动取款机会拒收“00”年的提款卡；</p><h5 id="保险业"><a href="#保险业" class="headerlink" title="保险业"></a>保险业</h5><p>保险公司可能会将每份保险的年限算错。</p><h5 id="电信业"><a href="#电信业" class="headerlink" title="电信业"></a>电信业</h5><p>你在1999年12月31日23：59分打了三分钟的电话，电话局的账单却可能显示为（-100年+3分钟）；</p><h5 id="电力系统"><a href="#电力系统" class="headerlink" title="电力系统"></a>电力系统</h5><p><a href="https://baike.baidu.com/item/美国夏威夷">美国夏威夷</a>电力公司曾经做了一项实际的实验，输入00年，结果电厂自动停止操作，在某些情况下也发生电压与频率方面的变化，造成用户全面停电、电器故障甚至烧毁；美国联邦核管处更是担心全美的百余座核电厂里的仪器由于2000年问题失控造成核辐射外泄等灾难。</p><h5 id="税务系统"><a href="#税务系统" class="headerlink" title="税务系统"></a>税务系统</h5><p>税务局的电脑可能会认为你拖欠了100年的税款，从而寄来天文数字般的补税通知。</p><h5 id="医药业"><a href="#医药业" class="headerlink" title="医药业"></a>医药业</h5><p>医疗仪器如救生系统或监视系统可能死机导致患者生命危急以及血库管理、医嘱系统与病历、器材管理全部无法正常运作。</p><h5 id="交通系统"><a href="#交通系统" class="headerlink" title="交通系统"></a>交通系统</h5><p>由于控制雷达的电脑失灵，空中管制完全瘫痪，班机停飞。</p><p>2000年问题更成了美国各大汽车公司的头疼问题，原来，美国汽车都有确定的使用年限（比如10年），超过该时间期限后汽车便会自动拒绝发动。麻烦出在一些刚刚生产出来的自动化程度较高的汽车，其内部控制芯片仍用两位10进制数表示年份，那么到了2000年后，由于年份变成了00年，和出厂日期（比如1998年）一比较，竟然已运行了98年，汽车当然便会自动拒绝发动了。</p><p>2000年的千年虫事件，这个使几乎所有电子设备瘫痪的漏洞</p><hr><h5 id="2010年问题"><a href="#2010年问题" class="headerlink" title="2010年问题"></a>2010年问题</h5><p>2000年的千年虫事件，这个使几乎所有电子设备瘫痪的漏洞，在沉寂了10年之后，再次悄然现身。</p><p>据最近的网络消息称，出乎人们的预料，2010年再次出现类似2000年的“千年虫”问题。（2010年）</p><p><strong>银行卡失灵</strong></p><p>德国银行协会5日警告说，在进入2010年之际，超过2500万张德国银行卡可能遭到类似“千年虫”<a href="https://baike.baidu.com/item/软件漏洞">软件漏洞</a>的损害，导致电脑芯片无法识别年份“2010”，从而让使用自动取款机或在德国境内甚至境外分行取款、用卡消费的银行客户无法使用银行卡。</p><p>跳过2010直至2016年</p><p>不知道什么原因，澳大利亚昆士兰银行卡处理中心的计算机时钟，在越过2009年12月31日之后，反常地直接翻至2016年1月1日，掠过了中间的6个年头。然而，出现这样的状况会有什么样的后果呢？</p><p>最直接的，大量的<a href="https://baike.baidu.com/item/昆士兰州">昆士兰州</a>的企业依靠该银行处理他们的信用卡支付业务，而大量信用卡在2016年之前就已经到期失效，所以几乎所有的交易都面临瘫痪。不过虽然还没有查明原因，银行已经启动人工批准流程，以保证经济的正常运转。</p><hr><h5 id="2038年问题"><a href="#2038年问题" class="headerlink" title="2038年问题"></a>2038年问题</h5><p><strong>32位</strong>的<strong>Unix</strong>操作系统和<strong>Linux</strong>操作系统<strong>时间溢出问题</strong>又称为<a href="https://baike.baidu.com/item/2038年问题">2038年问题</a>（the Year 2038 problem）。如果你想知道什么是2038问题的话，你需要知道一些技术上的东西。这个bug是由用来写Unix/Linux的C语言引起的，<strong>C语言</strong>中用 <strong>time_t</strong> 来代表<strong>时间</strong>和<strong>日期</strong>，<strong>time_t</strong> 是整数<strong>（int）</strong>型的，它用来记载从<strong>1970年1月1日到2000年所经历的秒数</strong>。</p><p>这个数据是以<strong>32位存储</strong>的，第一位是符号位，其余的31位用来存数字，而这31位数字可以存储的最大数字为<strong>2147483647</strong>。</p><p>从<strong>1970年</strong>开始计算，这<strong>31位</strong>的数字可以表示的秒数最多可以用到<strong>2038年01月19日03时14分07秒</strong>，当时间到达这个数字的时候系统将会出现问题，到时候数字不会自动增加，而是会变为<strong>-2147483648</strong>，而这串数字代表的时间是<strong>1901年12月13日20时45分52秒</strong>，这会导致很多的程序出现问题，甚至崩溃。</p><p>不过现在64位系统已经成为主流，这个问题现在是可以避免的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="HTTP" scheme="https://www.epsopn.top/categories/HTTP/"/>
    
    
      <category term="心得" scheme="https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>mac安装Hexo</title>
    <link href="https://www.epsopn.top/archives/71256fba.html"/>
    <id>https://www.epsopn.top/archives/71256fba.html</id>
    <published>2020-05-23T08:57:30.000Z</published>
    <updated>2020-05-29T16:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class=" language-ruby"><code class="language-ruby">$ npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli</code></pre><span id="more"></span><p>这个安装的时候，我遇到了这样的报错：</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/B.jpg" alt></p><p>而且在用</p><pre class=" language-ruby"><code class="language-ruby">$ hexo init</code></pre><p>这个时候，会出现command not found。命令未找到。</p><p>这报错的原因在于执行安装命令的时候我没有获取管理员权限。<br>请使用：</p><pre class=" language-ruby"><code class="language-ruby">$ sudo <span class="token operator">-</span>s</code></pre><p>获取管理员权限在重新安装hexo执行安装命令。</p><p>之后重启终端就可以正常使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h3&gt;&lt;p&gt;所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;$ npm install -g hexo-cli&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="心得" scheme="https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架介绍</title>
    <link href="https://www.epsopn.top/archives/e2a11bfc.html"/>
    <id>https://www.epsopn.top/archives/e2a11bfc.html</id>
    <published>2020-05-13T13:18:11.000Z</published>
    <updated>2022-06-09T16:22:48.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-SpringMVC框架简介"><a href="#1-SpringMVC框架简介" class="headerlink" title="1. SpringMVC框架简介"></a>1. SpringMVC框架简介</h2><p>MVC = Model（数据模型） + View（视图） + Controller（控制器）</p><p>SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！</p><span id="more"></span><p>在传统的Java EE开发模式下，是使用Servlet组件作为项目的控制器，假设项目中有“用户注册”的功能，则可能需要创建<code>UserRegServlet</code>，如果还有“用户登录”功能，则可能需要创建<code>UserLoginServlet</code>，以此类推，每增加1个新的功能，就需要开发一个新的Servlet，如果某个项目中有100个功能，就需要开发100个Servlet，如果有500个功能，就需要开发500个Servlet！而且，每个Servlet可能还需要添加相关的配置，所以，一旦Servlet的数量过多，就会不利于管理和维护，并且，在服务器运行时，需要创建很多Servlet类的对象，会消耗较多的内存空间。</p><p>另外，Java EE的许多API并不简洁，在使用时并不是那么方便！</p><p>使用SpringMVC框架，以上问题都可以被解决！</p><h2 id="2-SpringMVC核心组件"><a href="#2-SpringMVC核心组件" class="headerlink" title="2. SpringMVC核心组件"></a>2. SpringMVC核心组件</h2><ul><li>DispatcherServlet：前端控制器，用于接收所有请求；</li><li>HandlerMapping：用于配置请求路径与Controller组件的对应关系；</li><li>Controller：控制器，具体处理请求的组件；</li><li>ModelAndView：Controller组件处理完请求后得到的结果，由数据与视图名称组成；</li><li>ViewResolver：视图解析器，可根据视图名称确定需要使用的视图组件。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-SpringMVC框架简介&quot;&gt;&lt;a href=&quot;#1-SpringMVC框架简介&quot; class=&quot;headerlink&quot; title=&quot;1. SpringMVC框架简介&quot;&gt;&lt;/a&gt;1. SpringMVC框架简介&lt;/h2&gt;&lt;p&gt;MVC = Model（数据模型） + View（视图） + Controller（控制器）&lt;/p&gt;
&lt;p&gt;SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="https://www.epsopn.top/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="https://www.epsopn.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot简介</title>
    <link href="https://www.epsopn.top/archives/c35b400a.html"/>
    <id>https://www.epsopn.top/archives/c35b400a.html</id>
    <published>2020-05-09T14:30:52.000Z</published>
    <updated>2020-06-30T15:35:14.677Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1. SpringBoot简介"></a>1. SpringBoot简介</h2><p>SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。</p><p>SpringBoot的核心思想是<strong>约定大于配置</strong>，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将<code>DispatcherServlet</code>的映射路径配置为<code>/*</code>，则使用者就按照这个配置值使用即可，无须自已编写配置！</p><span id="more"></span><h2 id="2-使用SpringBoot开发用户注册登录"><a href="#2-使用SpringBoot开发用户注册登录" class="headerlink" title="2. 使用SpringBoot开发用户注册登录"></a>2. 使用SpringBoot开发用户注册登录</h2><h3 id="2-1-创建SpringBoot项目"><a href="#2-1-创建SpringBoot项目" class="headerlink" title="2.1. 创建SpringBoot项目"></a>2.1. 创建SpringBoot项目</h3><p>如果要创建SpringBoot项目，常规的创建方式有：</p><ul><li>基于SpringBoot的父级项目来创建新的项目；</li><li>使用开发工具的创建向导来创建；</li><li>从Spring网站创建项目并导入到本地开发工具中。</li></ul><p>本次使用以上介绍的第3种做法，首先，打开<code>https://start.spring.io/</code>网站，在网页中主要确定几项：</p><ul><li>所使用的SpringBoot版本；</li><li>Group与Artifact，相当于在Eclipse中创建Maven项目时指定的Group Id和Artifact Id；</li><li>强烈建议<strong>不要</strong>修改默认生成的Package name，默认值就是由填写的Group和Artifact值决定的；</li><li>确定使用jar或war；</li><li>添加必要的依赖。</li></ul><p>完成后，点击页面中的<strong>Generate</strong>按钮就可以开始生成项目并自动下载该项目！</p><p>解压下载得到的压缩包文件，将得到项目文件夹，为了便于管理项目，推荐将该文件夹移动到Workspace中，避免以后找不到这个项目了。</p><p>然后，在Eclipse中，通过<strong>Import</strong> &gt; <strong>Existing Maven Projects</strong>导入项目，默认的项目结构并不完整，可以暂且不管，后续项目更新完成后就会恢复正常，导入项目后，项目会开始自动下载所需的依赖，这个过程中只需要保证能够连接到Maven服务器，确保能下载所依赖的jar包，然后，等待即可，如果项目没有开始自动下载，对项目点右键，选择<strong>Maven</strong> &gt; <strong>Update Project</strong>更新即可。</p><blockquote><p>建议使用4.11及以上版本的Eclipse，如果使用的是较低版本的Eclipse，在pom.xml文件中可能报错，这是因为较低版本的Eclipse中内置的Maven配置版本较低导致的，而较高版本的Eclipse中内置的Maven配置版本较高，就不会出错，并且，即使出错，也不影响正常的开发和运行。</p></blockquote><h3 id="2-2-检查项目是否基本可用"><a href="#2-2-检查项目是否基本可用" class="headerlink" title="2.2. 检查项目是否基本可用"></a>2.2. 检查项目是否基本可用</h3><p>展开项目中的<strong>src/test/java</strong>，其中，已经存在<code>cn.tedu.sample</code>包，这个包的名称是创建项目时填写的Group和Artifact决定的，<strong>这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中</strong>！在包中已经存在<code>SampleApplicationTests</code>类，类中有<code>contextLoads()</code>方法，通过单元测试的方式，直接测试方法，如果能成功运行，则表示测试环境是正常的！</p><p>展开项目中的<strong>src/main/java</strong>，其中，已经存在<code>cn.tedu.sample</code>包，这个包的名称是创建项目时填写的Group和Artifact决定的，<strong>这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中</strong>！在包中已经存在<code>SampleApplication</code>类，它是项目的<strong>启动类</strong>，类中有<code>main()</code>方法，这个<code>main()</code>就是整个项目的启动方法。</p><h3 id="2-3-在项目中添加静态页面"><a href="#2-3-在项目中添加静态页面" class="headerlink" title="2.3. 在项目中添加静态页面"></a>2.3. 在项目中添加静态页面</h3><p>在SpringBoot项目中，在<strong>src/main/resources</strong>下，默认就存在<strong>static</strong>文件夹，这个文件就是SpringBoot项目用于存放静态资源（网页文件、css文件、js文件、图片文件等）的文件夹！</p><p>所以，可以在<strong>static</strong>文件夹下创建<strong>index.html</strong>文件，内容可以自行设计，完成后，启动项目，在浏览器中输入<code>http://localhost:8080/</code>即可访问。</p><p>因为SpringBoot框架内置了Tomcat，每个项目都有独立的Tomcat，在部署项目时，会将<code>Context Path</code>设置为<code>&quot;&quot;</code>，即空字符串，所以，在SpringBoot的启动日志中也会有：</p><pre><code>Tomcat started on port(s): 8080 (http) with context path &#39;&#39;</code></pre><p>所以，最后，在执行访问时，URL的端口号右侧不需要添加项目名称！</p><p>另外，<strong>index.html</strong>是默认的资源名称，所以，如果需要访问的就是这个资源，则URL中也不必显式的指定资源名。</p><p>在SpringBoot项目中，在<strong>src/main/resources</strong>下默认即存在<strong>application.properties</strong>文件，这个文件是整个项目的配置文件，后续相关的配置都需要写在这个文件中！例如，可以在该文件中添加配置：</p><pre><code>server.port=80</code></pre><p>就可以把Tomcat的端口号改为<code>80</code>，如果使用的是Windows操作系统，重新启动项目，通过<code>http://localhost/</code>即可访问刚才的页面，因为<code>80</code>端口是HTTP协议的默认端口，所以，当尝试提交HTTP请求时，如果没有显式的指定端口号，会视为尝试访问服务器的<code>80</code>端口！如果使用的是Mac OS或Linux操作系统，这些操作系统对80端口的使用是非常严格的，需要自行在操作系统中进行相关配置后，才允许使用80端口！</p><p><strong>注意：如果自行指定端口，推荐使用4位数甚至5位的端口号，因为2位数和3位数的许多端口号都被某些协议默认使用了，如果使用这些端口号，就会导致各服务产生冲突，某些服务将无法正常使用！</strong></p><p>另外，如果在SpringBoot项目中，还会使用到Thymeleaf等模版技术，应该将模版页面放在<strong>src/main/resources/templates/</strong>文件夹下。</p><h3 id="2-4-使用控制器接收客户端提交的请求"><a href="#2-4-使用控制器接收客户端提交的请求" class="headerlink" title="2.4. 使用控制器接收客户端提交的请求"></a>2.4. 使用控制器接收客户端提交的请求</h3><p>在<strong>src/main/java</strong>下的<code>cn.tedu.sample</code>包是SpringBoot项目默认组件扫描的根包，所以，在项目中创建的所有组件类（需要由Spring框架创建并管理的）必须放在这个包或其子包中！</p><p>在<code>cn.tedu.sample</code>包中创建<code>HelloController</code>控制器，在类的声明之前添加<code>@Controller</code>注解，并在类中添加处理请求的方法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>tedu<span class="token punctuation">.</span>sample<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> String <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"SpringBoot框架真好用！！！"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>编写完成后，重启项目，在浏览器中输入<code>http://localhost:8080/hello</code>即可请求到以上控制器中的资源！</p><p>SpringBoot项目默认已经配置了<code>DispatcherServlet</code>，并且，映射的路径是<code>/*</code>，所以，在配置请求路径时，并不要求路径中的资源是以<code>.do</code>作为后缀，同时，也就意味着当前项目中所有请求路径都会被SpringMVC框架所处理！</p><p>SpringBoot框架将所有内置的框架、开发环境中的编码已经全部设置为<code>UTF-8</code>了，所以，在使用SpringBoot时，默认都是可以直接支持中文的！</p><p>在编写控制器时，还可以使用一些新的注解：</p><ul><li><code>@RestController</code>：该注解可以用于替代此前使用的<code>@Controller</code>，使用该注解后，当前控制器类中所有的方法默认都是响应正文，相当于每个方法之前都添加了<code>@ResponseBody</code>，所以，可以简单的理解为<code>@RestController = @Controller + @ResponseBody</code>；</li><li><code>@GetMapping</code>：该注解相当于<code>@RequestMapping(method=RequestMethod.GET)</code>；</li><li><code>@PostMapping</code>：该注解相当于<code>@RequestMapping(method=RequestMethod.POST)</code>；</li></ul><p>以上注解并不是SpringBoot项目新增的，而是SpringMVC框架中本来就有的，但是，在传统的SpringMVC框架中，这些注解是不能直接使用的，需要另行配置，而SpringBoot默认已经完成了这些配置，所以，可以直接使用！</p><h3 id="2-5-配置数据库连接"><a href="#2-5-配置数据库连接" class="headerlink" title="2.5. 配置数据库连接"></a>2.5. 配置数据库连接</h3><p>在SpringBoot项目中，如果涉及数据库编程，需要自行添加数据库相关的依赖，虽然SpringBoot默认能集成绝大部分常规依赖，但是，它无法直接确定每个开发者使用的是哪种数据库、哪种数据库编程时使用的框架，所以，是需要自行添加的！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>当SpringBoot项目添加了数据库相关的依赖后，启动项目时，就会自动尝试读取数据库连接的配置信息，如果没有配置信息，则启动项目会报错！</p><p>所以，需要在<strong>application.properties</strong>中添加配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>添加以上配置后，就可以正常启动项目，但是，启动项目时，只会读取配置信息，并不会执行连接，所以，即使以上配置信息中存在错误的值，也不影响项目启动，同样，也不无法得知以上配置信息是否正确！</p><p>所以，接下来，需要尝试连接到数据库，以确认以上配置信息是否正确！可以在<strong>src/test/java</strong>中<code>cn.tedu.sample</code>中的<code>SampleApplicationTests</code>测试类编写并执行单元测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2-6-实现注册相关的数据库编程"><a href="#2-6-实现注册相关的数据库编程" class="headerlink" title="2.6. 实现注册相关的数据库编程"></a>2.6. 实现注册相关的数据库编程</h3><p>首先，需要创建用户数据类，用于封装用户数据的属性，所以，在<strong>src/main/java</strong>的<code>cn.tedu.sample</code>包下创建<code>User</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>  <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 补充SET/GET方法，toString()方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注册功能应该由2项数据操作所组成：先根据用户尝试注册的用户名查询数据，如果查询到某个结果，则表示该用户名已经被占用，不允许插入新的用户数据，如果查询不到结果，则该用户名没有被人占用，将用户尝试注册的信息插入到数据库中即可！所以，涉及操作分别是<strong>根据用户名查询用户数据</strong>和<strong>插入用户数据</strong>。</p><p>先<code>cn.tedu.sample</code>包中创建<code>UserMapper</code>接口，并在接口中添加抽象方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>tedu<span class="token punctuation">.</span>sample<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Integer <span class="token function">addnew</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  User <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>写完接口后，需要配置接口文件的位置，配置的做法可以是：</p><ul><li>在接口的声明之前添加<code>@Mapper</code>注解，使用这种做法，就要求每一个接口都需要添加该注解；</li><li>在启动类（<code>SampleApplication</code>）的声明之前，添加<code>@MapperScan(&quot;接口所在的包&quot;)</code>注解，然后，所有接口都放在配置的包中即可！</li></ul><p>一般推荐使用以上的第2种做法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.tedu.sample"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SampleApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>接下来，就需要配置各抽象方法对应的SQL语句，首先，还是在<strong>src/main/resources</strong>下创建<strong>mappers</strong>文件夹，并在该文件中粘贴得到<strong>UserMapper.xml</strong>，用于配置SQL语句。</p><p>在<strong>UserMapper.xml</strong>中配置SQL语句：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"       "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tedu.sample.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addnew<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO t_user (      username, password, age, phone, email    ) VALUES (      #<span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>password<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>age<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>phone<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>    )  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tedu.sample.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM t_user WHERE username=#<span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>在执行单元测试之前，还需要指定这些XML文件的位置，需要在<strong>application.properties</strong>中进行配置：</p><pre><code>mybatis.mapper-locations=classpath:mappers/*.xml</code></pre><p>最后，编写并执行单元测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"lucy02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"13900139002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"lucy02@foxmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer rows <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">addnew</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rows="</span> <span class="token operator">+</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token string">"lucy"</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>至此，关于注册时涉及的数据库编程的相关功能就已经完成！</p><p>其实，还可以在抽象方法之前添加注解来配置SQL语句及相关内容，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user (username, password, age, phone, email) VALUES (#&amp;#123;username&amp;#125;, #&amp;#123;password&amp;#125;, #&amp;#123;age&amp;#125;, #&amp;#123;phone&amp;#125;, #&amp;#123;email&amp;#125;)"</span><span class="token punctuation">)</span>  Integer <span class="token function">addnew</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM t_user WHERE username=#&amp;#123;username&amp;#125;"</span><span class="token punctuation">)</span>  User <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这种做法也不是SpringBoot集成MyBatis才可以做到的，直接使用MyBatis也可以实现，但是，需要额外的配置，而SpringBoot已经完成了相关的配置，所以，可以直接使用！</p><h3 id="2-7-开发处理注册的控制器"><a href="#2-7-开发处理注册的控制器" class="headerlink" title="2.7. 开发处理注册的控制器"></a>2.7. 开发处理注册的控制器</h3><p>首先，需要创建封装返回结果的<code>JsonResult</code>类，在类中声明需要响应到客户端的JSON数据中的属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer state<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>建议新创建<code>UserController</code>控制器类，在这个控制器类中处理请求：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"reg"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> JsonResult <span class="token function">reg</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    User result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      userMapper<span class="token punctuation">.</span><span class="token function">addnew</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>完成后，重新启动项目，在浏览器中访问<code>http://localhost:8080/reg?username=david&amp;password=1234</code>执行测试。</p><h3 id="2-8-前端页面"><a href="#2-8-前端页面" class="headerlink" title="2.8. 前端页面"></a>2.8. 前端页面</h3><p>先从前序项目中复制<strong>reg.html</strong>和jQuery文件到<strong>static</strong>文件夹下。</p><p>为注册的表单设置ID值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-reg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>修改按钮：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reg()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>然后，引用jQuery文件，并编写代码以提交请求、处理结果：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.4.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"/reg"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form-reg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token string">"dataType"</span><span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token string">"success"</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"注册失败！您尝试注册的用户名已经被占用！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-SpringBoot简介&quot;&gt;&lt;a href=&quot;#1-SpringBoot简介&quot; class=&quot;headerlink&quot; title=&quot;1. SpringBoot简介&quot;&gt;&lt;/a&gt;1. SpringBoot简介&lt;/h2&gt;&lt;p&gt;SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。&lt;/p&gt;
&lt;p&gt;SpringBoot的核心思想是&lt;strong&gt;约定大于配置&lt;/strong&gt;，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将&lt;code&gt;DispatcherServlet&lt;/code&gt;的映射路径配置为&lt;code&gt;/*&lt;/code&gt;，则使用者就按照这个配置值使用即可，无须自已编写配置！&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.epsopn.top/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.epsopn.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>今天都干什么了？</title>
    <link href="https://www.epsopn.top/archives/ab8a344f.html"/>
    <id>https://www.epsopn.top/archives/ab8a344f.html</id>
    <published>2020-05-06T14:05:36.000Z</published>
    <updated>2020-05-26T11:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/qqq.jpg" alt></p><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/qqq.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="问号问号" scheme="https://www.epsopn.top/categories/%E9%97%AE%E5%8F%B7%E9%97%AE%E5%8F%B7/"/>
    
    
      <category term="许多的问号" scheme="https://www.epsopn.top/tags/%E8%AE%B8%E5%A4%9A%E7%9A%84%E9%97%AE%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架的介绍</title>
    <link href="https://www.epsopn.top/archives/89a211cf.html"/>
    <id>https://www.epsopn.top/archives/89a211cf.html</id>
    <published>2020-05-05T15:32:57.000Z</published>
    <updated>2020-05-29T16:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-Spring框架简介"><a href="#1-Spring框架简介" class="headerlink" title="1. Spring框架简介"></a>1. Spring框架简介</h2><p>框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！</p><blockquote><p>在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！</p></blockquote><p>Spring框架主要是用于创建对象和管理对象的！</p><span id="more"></span><h4 id="使用Spring框架的原因"><a href="#使用Spring框架的原因" class="headerlink" title="使用Spring框架的原因"></a>使用Spring框架的原因</h4><p>Spring框架的主要作用之一就是创建对象，但是，创建对象本身是一件非常简单的事情，例如：</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，在实际开发项目时，一个项目中的类会非常多，需要创建的对象也非常多，并且，类与类之间的<strong>依赖</strong>会比较复杂，如果直接创建对象，会导致<strong>耦合度</strong>较高，不利于项目的管理和维护！</p><h4 id="Spring框架的优点都有什么？"><a href="#Spring框架的优点都有什么？" class="headerlink" title="Spring框架的优点都有什么？"></a>Spring框架的优点都有什么？</h4><ul><li><p>简化编程：Spring对JavaEE中的一些比较繁琐的API做了简化和封装，使用封装之后的API不仅代码更简洁，而且质量更高。</p></li><li><p>解耦：对象之间的依赖关系由容器来统一管理、降低了对象之间的耦合度、方便代码的维护，同时也实现了资源的统一调度和管理。</p></li><li><p>支持面向切面编程AOP：可以方便对程序添加通用的服务，比如事务、权限管理等。</p></li><li><p>集成其它框架：不发明重复的轮子，集成其它一些优秀框架、使开发者用统一的并且更加简洁的方式来使用这些框架。</p></li><li><p>轻量：可以依赖项目的实际要求，有选择的使用Spring框架的全部或者一部分。</p></li></ul><h2 id="2-通过Spring框架创建对象，并从中获取所需的对象"><a href="#2-通过Spring框架创建对象，并从中获取所需的对象" class="headerlink" title="2. 通过Spring框架创建对象，并从中获取所需的对象"></a>2. 通过Spring框架创建对象，并从中获取所需的对象</h2><p>新建一个Maven Project，在创建过程中，勾选中<strong>Create a simple project</strong>选项，在<strong>Group Id</strong>一栏输入<code>cn.tedu</code>，在<strong>Artifact Id</strong>一栏输入<code>spring01</code>，下方的<strong>Packaging</strong>选择<code>war</code>，刚创建好的项目因为没有<strong>web.xml</strong>文件会报错，生成该文件即可。</p><blockquote><p>在Packaing一栏也可以选择jar，并不一定必须选择war，后续会要求必须使用war，所以，提前体验也是可以的！</p></blockquote><p>打开项目的<strong>pom.xml</strong>文件，在其中添加Spring的依赖！在使用Spring框架时，需要添加的依赖是<code>spring-context</code>，具体代码是：</p><pre><code>&lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><blockquote><p>当需要查询某个依赖时，在浏览器中搜索“mvn”关键字，打开 <a href="http://www.mvnrepository.com">http://www.mvnrepository.com</a> 网站，并搜索依赖的名称，在查询结果中找到匹配度最高的依赖，选择版本，就可以查询到依赖的代码。</p></blockquote><p>然后，将下载的Spring配置文件的压缩包解压，得到<strong>applicationContext.xml</strong>文件，这个文件就是Spring的配置文件，将它复制到项目的<strong>src/main/resources</strong>文件夹下！</p><blockquote><p>如果该文件提示错误，可以不处理，并不影响开发和运行！</p></blockquote><p>可以在Spring的配置文件中配置由Spring创建并管理的对象！</p><p>假设需要由Spring创建一个<code>Date</code>类的对象，则在该文件中添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id属性：自定义名称，后续将根据这个名称来获取对象，推荐使用类名将首字母改为小写 --></span><span class="token comment" spellcheck="true">&lt;!-- class属性：需要Spring框架创建哪个类的对象，取值是类的全名，即包名与类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>至此，已经配置好了需要由Spring管理的对象，后续，当该配置文件被加载时，Spring框架就会创建<code>java.util.Date</code>类的对象，开发人员也可以通过id属性值<code>date</code>获取该对象！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Spring框架简介&quot;&gt;&lt;a href=&quot;#1-Spring框架简介&quot; class=&quot;headerlink&quot; title=&quot;1. Spring框架简介&quot;&gt;&lt;/a&gt;1. Spring框架简介&lt;/h2&gt;&lt;p&gt;框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring框架主要是用于创建对象和管理对象的！&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaSpring" scheme="https://www.epsopn.top/categories/JavaSpring/"/>
    
    
      <category term="JavaSpring" scheme="https://www.epsopn.top/tags/JavaSpring/"/>
    
  </entry>
  
  <entry>
    <title>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</title>
    <link href="https://www.epsopn.top/archives/218fe6f9.html"/>
    <id>https://www.epsopn.top/archives/218fe6f9.html</id>
    <published>2020-05-04T02:39:40.000Z</published>
    <updated>2022-06-09T13:23:54.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置"><a href="#Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置" class="headerlink" title="Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置"></a>Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置</h2><blockquote><h5 id="大致情况："><a href="#大致情况：" class="headerlink" title="大致情况："></a>大致情况：</h5></blockquote><p>刚刚用github成功解析了我的新域名，缺发现了这个错误</p><p><code>Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.</code></p><span id="more"></span><blockquote><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></blockquote><p>只需要在leancloud里面把你新的域名地址添加进来就ok了</p><p>在设置&gt;&gt;安全中心&gt;&gt;web安全域名</p><p><img src="https://cdn.jsdelivr.net/gh/Epsopn/bizhi@master/APIanquan.png" alt> </p><p>这样问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置&quot;&gt;&lt;a href=&quot;#Valine出现Code-403-访问被api域名白名单拒绝，请检查你的安全域名设置&quot; class=&quot;headerlink&quot; title=&quot;Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置&quot;&gt;&lt;/a&gt;Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置&lt;/h2&gt;&lt;blockquote&gt;
&lt;h5 id=&quot;大致情况：&quot;&gt;&lt;a href=&quot;#大致情况：&quot; class=&quot;headerlink&quot; title=&quot;大致情况：&quot;&gt;&lt;/a&gt;大致情况：&lt;/h5&gt;&lt;/blockquote&gt;
&lt;p&gt;刚刚用github成功解析了我的新域名，缺发现了这个错误&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="遇到的问题" scheme="https://www.epsopn.top/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="分享" scheme="https://www.epsopn.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第一次搭建博客</title>
    <link href="https://www.epsopn.top/archives/5ff0b802.html"/>
    <id>https://www.epsopn.top/archives/5ff0b802.html</id>
    <published>2020-05-03T10:11:03.000Z</published>
    <updated>2020-05-29T16:12:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="第一次搭建博客遇到的问题"><a href="#第一次搭建博客遇到的问题" class="headerlink" title="第一次搭建博客遇到的问题"></a>第一次搭建博客遇到的问题</h4><blockquote><p><strong>身为小白的第一个搭建个人博客</strong>，中间的坑是在是太多了</p></blockquote><hr><span id="more"></span><p>由于对软件的不熟悉装载了<code>node.js14.1.0</code>版本导致了一直无法上传到git里面，查询了很多解决办法，因为是很新的版本，这个错误应该还没有遇到过。纠结了两天的时间，最后在群中得知，可能是版本过高导致，我又卸载装<code>v12</code>版本，果然两天没有搞定的错误就这样搞定了。</p><hr><p>接下来的就比较好弄了，一步一步的尝试写来，稀里糊涂的就做了个差不多，</p><blockquote><p>总结一句话：</p></blockquote><p><em>不到万不得已，最后不要升级，毕竟bug太多，没有前人踩路，容易摔死</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一次搭建博客遇到的问题&quot;&gt;&lt;a href=&quot;#第一次搭建博客遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;第一次搭建博客遇到的问题&quot;&gt;&lt;/a&gt;第一次搭建博客遇到的问题&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;身为小白的第一个搭建个人博客&lt;/strong&gt;，中间的坑是在是太多了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="心得" scheme="https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
