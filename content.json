{"meta":{"title":"阿呆の小客栈","subtitle":"z-p","description":"嗨，你好，我很有趣,发布&解决&收获","author":"阿呆","url":"https://www.epsopn.top","root":"/"},"pages":[{"title":"相册","date":"2020-05-29T14:37:49.000Z","updated":"2020-06-06T10:46:42.000Z","comments":true,"path":"Gallery/index.html","permalink":"https://www.epsopn.top/Gallery/index.html","excerpt":"","text":"加载壁纸需要耗用一定的流量，如果不是流量大户请立即撤离！ 鬼刀 收藏的一些壁紙 喜欢的壁纸 ♥️壁纸"},{"title":"","date":"2020-05-29T17:42:33.000Z","updated":"2020-05-29T17:34:14.000Z","comments":true,"path":"about/index.html","permalink":"https://www.epsopn.top/about/index.html","excerpt":"","text":"关于我以后这里就是咱的博客了………………………….. 一名普普通通的小白 稀里糊涂做了博客￣□￣｜｜ 大学毕业了 喜欢吃………….. 喜欢动漫……………. 喜欢工作！！！热爱自由！！！！ 奥利给！！！（..） 关于刻薄2020.0502建立客栈，感谢………………… 2020.0503增加了音乐播放的功能"},{"title":"关于我","date":"2020-05-02T13:55:11.000Z","updated":"2020-05-05T10:15:34.000Z","comments":true,"path":"about/index1.html","permalink":"https://www.epsopn.top/about/index1.html","excerpt":"","text":"山东的，刚刚大学毕业 现在在济南"},{"title":"","date":"2020-05-29T17:13:02.000Z","updated":"2020-05-05T10:05:24.000Z","comments":true,"path":"about/site.html","permalink":"https://www.epsopn.top/about/site.html","excerpt":"","text":"关于我以后这里就是咱的博客了………………………….. 一名普普通通的小白 稀里糊涂做了博客￣□￣｜｜ 大学毕业了 喜欢吃………….. 喜欢动漫……………. 喜欢工作！！！热爱自由！！！！ 奥利给！！！（..） 关于刻薄2020.0502建立客栈，感谢………………… 2020.0503增加了音乐播放的功能"},{"title":"分类","date":"2020-05-03T05:57:53.000Z","updated":"2020-05-29T17:31:02.000Z","comments":false,"path":"categories/index.html","permalink":"https://www.epsopn.top/categories/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-05-03T11:06:11.000Z","updated":"2020-05-03T11:06:12.000Z","comments":true,"path":"categories/index-1.html","permalink":"https://www.epsopn.top/categories/index-1.html","excerpt":"","text":""},{"title":"","date":"2020-05-23T07:07:32.000Z","updated":"2020-05-05T12:06:32.000Z","comments":true,"path":"data/sentences.json","permalink":"https://www.epsopn.top/data/sentences.json","excerpt":"","text":"[{\"content\":\"Hello, World!\",\"author\":\"Brian Kernighan\",\"from\":\"The C Programming Language\"},{\"content\":\"我们一日日度过的所谓日常，实际上可能是接连不断的奇迹。\",\"from\":\"日常\"},{\"content\":\"是啊，我所爱的，即非群星，也非银河。\",\"author\":\"云游君\",\"from\":\"yunyoujun.cn\"},{\"content\":\"隐约雷鸣 阴霾天空 但盼风雨来 能留你在此\",\"from\":\"万叶集·雷神短歌\"}]"},{"title":"可爱的女孩子","date":"2020-06-06T09:59:58.000Z","updated":"2020-05-09T15:12:54.000Z","comments":true,"path":"girls/index.html","permalink":"https://www.epsopn.top/girls/index.html","excerpt":"","text":""},{"title":"友情鏈接","date":"2020-05-29T16:24:03.000Z","updated":"2020-05-29T17:44:00.000Z","comments":true,"path":"link/index.html","permalink":"https://www.epsopn.top/link/index.html","excerpt":"","text":""},{"title":"我的小伙伴们","date":"2020-05-01T05:06:06.000Z","updated":"2020-05-13T13:50:40.000Z","comments":true,"path":"links/index.html","permalink":"https://www.epsopn.top/links/index.html","excerpt":"","text":""},{"title":"好听的🎵","date":"2020-05-29T16:47:47.000Z","updated":"2020-05-30T04:12:40.000Z","comments":true,"path":"music/index.html","permalink":"https://www.epsopn.top/music/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-03T05:53:36.000Z","updated":"2020-05-29T17:30:00.000Z","comments":false,"path":"tags/index.html","permalink":"https://www.epsopn.top/tags/index.html","excerpt":"","text":""},{"title":"鬼刀","date":"2020-05-29T14:37:49.000Z","updated":"2020-06-06T11:01:26.000Z","comments":true,"path":"Gallery/guidao/index.html","permalink":"https://www.epsopn.top/Gallery/guidao/index.html","excerpt":"","text":""},{"title":"喜欢的壁纸","date":"2020-05-29T14:37:49.000Z","updated":"2020-06-06T11:02:51.000Z","comments":true,"path":"Gallery/wallpaper/index.html","permalink":"https://www.epsopn.top/Gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"常见的HTTP响应状态码","slug":"常见的HTTP响应状态码","date":"2020-05-30T14:52:10.000Z","updated":"2020-05-30T15:11:24.000Z","comments":true,"path":"archives/5aa59435.html","link":"","permalink":"https://www.epsopn.top/archives/5aa59435.html","excerpt":"","text":"HTTP响应服务器收到了客户端发来的HTTP请求后，根据HTTP请求中的动作要求，服务端做出具体的动作，将结果回应给客户端，称为HTTP响应。 响应数据格式HTTP响应由三部分组成：状态行、响应头、响应正文； 状态行：包括协议版本Version、状态码Status Code、回应短语； 响应头（server header）：包括搭建服务器的软件，发送响应的时间，回应数据的格式等信息，包含HTTP状态码 (HTTP Status Code) ； 响应正文：就是响应的具体数据。 HTTP状态码HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字有分类的作用。不同的状态码代表不同的含义。常见HTTP响应状态码状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：1xx：临时响应（Informational），需要请求者继续执行操作的状态代码，表示服务器正在接受请求。 2xx：成功状态码（Success），已成功接受客户端请求。 3xx：重定向状态码（Redirection），需要客户端做进一步操作来完成请求。 4xx：客户端错误（Client Error），客户端请求出错导致服务端无法正常完成请求。 5xx：服务端错误（Server Error），服务器出错未能成功处理服务端请求。 常见的HTTP响应码请求收到，继续处理： 100：客户端必须继续发出请求 101：客户端要求服务器根据请求转换HTTP协议版本 操作成功/收到/分析/接受： 200：正确； 201：提示知道新文件的URL； 202：表示服务器已经接受了请求，但是还没有处理，而且这个请求最终会不会处理还不确定； 203：返回信息不确定或不完整； 204：请求收到，但返回信息为空； 205：服务器完成了请求，用户代理必须复位当前已经浏览过的文件； 206：服务器已经完成了部分用户的GET请求； 重定向： 300：请求的资源可在多处得到； 301：永久重定向，在Location响应首部的值仍为当前URL(隐式重定向)，（静态重定向）； 302：临时重定向，在Location响应首部的值仍为新的URL(显示重定向)，（动态重定向）； 客户端错误： 400：提交的请求参数不正确，可能是参数格式不正确，或没有提交必要的参数； 404：尝试请求的资源不存在； 405：请求方式错误； 服务器端错误: 500：服务器内部错误，一般在开发环境的控制台会有错误信息； 501：未实现。服务器不识别该请求方法，或者服务器没有能力完成请求； 503：服务不可用。服务器当前不可用(过载或故障)。 附1：常见的HTTP响应码请求收到，继续处理： 100 客户端必须继续发出请求 101 客户端要求服务器根据请求转换HTTP协议版本 操作成功收到，分析，接受： 200 交易成功 201 提示知道新文件的URL 202 接受和处理、但处理未完成 203 返回信息不确定或不完整 204 请求收到，但返回信息为空 205 服务器完成了请求，用户代理必须复位当前已经浏览过的文件 206 服务器已经完成了部分用户的GET请求 重定向： 300 请求的资源可在多处得到 301 永久重定向，在Location响应首部的值仍为当前URL(隐式重定向) 302 临时重定向，在Location响应首部的值仍为新的URL(显示重定向) 303 建议客户端访问其他URL或访问方式 304 Not Modified 请求的资源没有改变 可以继续使用缓存 305 请求的资源必须从服务器指定的地址得到 306 前一版本HTTP中使用的代码，现行版本中不再使用 307 声明请求的资源临时性删除 客户端错误： 400 错误请求，如语法错误 401 未授权 HTTP 401.1 未授权，登录失败 HTTP 401.2 未授权，服务器配置问题导致登录失败 HTTP 401.3 ACL 禁止访问资源 HTTP 401.4 未授权 授权被筛选器拒绝 HTTP 401.5 未授权 ISAPI或CGI授权失败 402 保留有效ChargeTo头响应 403 禁止访问 HTTP 403.1 禁止访问 禁止可执行访问 HTTP 403.2 禁止访问 禁止读访问 HTTP 403.3 禁止访问 禁止写访问 HTTP 403.4 禁止访问 要求SSL HTTP 403.5 禁止访问 要求SSL 128 HTTP 403.6 禁止访问 IP地址被拒绝 HTTP 403.7 禁止访问 要求客户端证书 HTTP 403.8 禁止访问 禁止站点访问 HTTP 403.9 禁止访问 连接的用户过多 HTTP 403.10 禁止访问 配置无效 HTTP 403.11 禁止访问 密码更改 HTTP 403.12 禁止访问 映射器拒绝访问 HTTP 403.13 禁止访问 客户端证书已被吊销 HTTP 403.15 禁止访问 客户端访问许可过多 HTTP 403.16 禁止访问 客户端证书不可信或者无效 HTTP 403.17 禁止访问 客户端证书已经到期或者尚未生效 404 没有发现文件、查询或URL 405 用户在Request-Line字段定义的方法不允许 406 根据用户发送的Accept拖，请求资源不可访问 407 类似401，用户必须首先在代理服务器上得到授权 408 客户端没有在用户指定的饿时间内完成请求 409 对当前资源状态，请求不能完成 410 服务器上不再有此资源且无进一步的参考地址 411 服务器拒绝用户定义的Content-Length属性请求 412 一个或多个请求头字段在当前请求中错误 413 请求的资源大于服务器允许的大小 414 请求的资源URL长于服务器允许的长度 415 请求资源不支持请求项目格式 416 请求中包含Range请求头字段，在当前请求资源范围内没有range指示值， 请求也不包含If-Range请求头字段 417 服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长 服务器端错误: 500 - 内部服务器错误 HTTP 500.100 - 内部服务器错误 HTTP 500-11 服务器关闭 HTTP 500-12 应用程序重新启动 HTTP 500-13 - 服务器太忙 HTTP 500-14 - 应用程序无效 HTTP 500-15 - 不允许请求 501 - 未实现 502 - 网关错误 503 - 服务不可用 504 - 网关超时 附2：HTTP状态码列表 状态码 状态码英文名称 中文描述 100 Continue 继续。客户端应继续其请求 101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议 200 OK 请求成功。一般用于GET与POST请求 201 Created 已创建。成功请求并创建了新的资源 202 Accepted 已接受。已经接受请求，但未处理完成 203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本 204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档 205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域 206 Partial Content 部分内容。服务器成功处理了部分GET请求 300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择 301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替 302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI 303 See Other 查看其它地址。与301类似。使用GET和POST请求查看 304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源 305 Use Proxy 使用代理。所请求的资源必须通过代理访问 306 Unused 已经被废弃的HTTP状态码 307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向 400 Bad Request 客户端请求的语法错误，服务器无法理解 401 Unauthorized 请求要求用户的身份认证 402 Payment Required 保留，将来使用 403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求 404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面 405 Method Not Allowed 客户端请求中的方法被禁止 406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求 407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权 408 Request Time-out 服务器等待客户端发送的请求时间过长，超时 409 Conflict 服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突 410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置 411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息 412 Precondition Failed 客户端请求信息的先决条件错误 413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息 414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理 415 Unsupported Media Type 服务器无法处理请求附带的媒体格式 416 Requested range not satisfiable 客户端请求的范围无效 417 Expectation Failed 服务器无法满足Expect的请求头信息 500 Internal Server Error 服务器内部错误，无法完成请求 501 Not Implemented 服务器不支持请求的功能，无法完成请求 502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应 503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中 504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求 505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理 附加：IT冷知识01第一台电脑为蒸汽驱动 作为公认的编程之父，Charles Babbage（查尔斯．巴贝奇）发明了世界上首批计算机之一。他将这台新设备称为分析引擎。其体积超过一栋房屋，由六台蒸汽机驱动并使用打孔卡进行编程。分析引擎有四大主要组成部分：1.转盘——相当于现代计算机中的CPU；2.存储——相当于现代计算机中的内存与存储介质；3.读取器——相当于输入机制；4.打印机——用于实现信息输出。 02电脑病毒的设计初衷并非是造成损害 史上第一款电脑病毒，竟然是由防御技术专家Fred Cohen(弗雷德·科恩)亲手设计出来的。他创造电脑病毒的目的仅仅是为了证明程序对电脑感染的可行性，从未希望借此对电脑造成任何危害。但这款程序却能够对电脑进行感染，并且能通过软盘等移动介质在不同计算机之间进行传播，因而命名为病毒。后来，他又创造出一种主动式电脑病毒，主要目的是帮助电脑用户找到未受感染可执行文件。 03第一位程序员是位女性 第一个程序员其实是个女的，这也是令人非常惊讶的，现在的IT行业大多都是男性，各大高校这一专业班上也大部分都是男生，所以感到奇怪也是正常的事情，这位女性是来自英国的数学家。 04程序中bug的名称源自“虫子” 在程序中bug一词用于技术错误。这一术语最初由爱迪生在1878年提出的，但当时并没有流行起来。在这的几年之后，美国上将Grace Hopper(葛丽丝·霍普)在她的日志本中，写下了她在Mark II电脑上发现的一项bug。不过实际上，她说的真的是“虫子”问题，因为一只蛾子被困在电脑的继电器中，导致电脑的操作无法正常运行。如图片所见，她写道“这是我在电脑上发现的第一个bug”。 1946 年，霍普发现了第一个电脑上的 bug。 在 Mark II 计算机上工作时，电脑不能正常运作了，霍普和整个团队都搞不清楚为什么。 后来才发现，是一只飞蛾意外飞入了一台电脑内部而引起的故障。终于把问题解除了，霍普在日记本中记录下了这一事件。”千年虫“事件：​ 计算机2000年问题，又叫做“千年虫”、“电脑千禧年千年虫问题”或“千年危机”。 ​ 由于其中的年份只使用两位十进制数来表示，因此当系统进行（或涉及到）跨世纪的日期处理运算时（如多个日期之间的计算或比较等），就会出现错误的结果，进而引发各种各样的系统功能紊乱甚至崩溃。因此从根本上说千年虫是一种程序处理日期上的bug（计算机程序故障），而非病毒。 ​ “千年虫”问题的根源始于60年代。当时计算机存储器的成本很高，如果用四位数字表示年份，就要多占用存储器空间，就会使成本增加，因此为了节省存储空间，计算机系统的编程人员采用两位数字表示年份。随着计算机技术的迅猛发展，虽然后来存储器的价格降低了， 但在计算机系统中使用两位数字来表示年份的做法却由于思维上的惯性势力而被沿袭下来， 年复一年，直到新世纪即将来临之际，大家才突然意识到用两位数字表示年份将无法正确辨识公元2000年及其以后的年份。1997年，信息界开始拉起了“千年虫”警钟，并很快引起了全球关注。 受到的影响金融业到了2000年，银行里面的电脑可能将2000年解释为1900年，引 起利息计算上的混乱，甚至自动将所有的记录消除；自动取款机会拒收“00”年的提款卡； 保险业保险公司可能会将每份保险的年限算错。 电信业你在1999年12月31日23：59分打了三分钟的电话，电话局的账单却可能显示为（-100年+3分钟）； 电力系统美国夏威夷电力公司曾经做了一项实际的实验，输入00年，结果电厂自动停止操作，在某些情况下也发生电压与频率方面的变化，造成用户全面停电、电器故障甚至烧毁；美国联邦核管处更是担心全美的百余座核电厂里的仪器由于2000年问题失控造成核辐射外泄等灾难。 税务系统税务局的电脑可能会认为你拖欠了100年的税款，从而寄来天文数字般的补税通知。 医药业医疗仪器如救生系统或监视系统可能死机导致患者生命危急以及血库管理、医嘱系统与病历、器材管理全部无法正常运作。 交通系统由于控制雷达的电脑失灵，空中管制完全瘫痪，班机停飞。 2000年问题更成了美国各大汽车公司的头疼问题，原来，美国汽车都有确定的使用年限（比如10年），超过该时间期限后汽车便会自动拒绝发动。麻烦出在一些刚刚生产出来的自动化程度较高的汽车，其内部控制芯片仍用两位10进制数表示年份，那么到了2000年后，由于年份变成了00年，和出厂日期（比如1998年）一比较，竟然已运行了98年，汽车当然便会自动拒绝发动了。 2000年的千年虫事件，这个使几乎所有电子设备瘫痪的漏洞 2010年问题2000年的千年虫事件，这个使几乎所有电子设备瘫痪的漏洞，在沉寂了10年之后，再次悄然现身。 据最近的网络消息称，出乎人们的预料，2010年再次出现类似2000年的“千年虫”问题。（2010年） 银行卡失灵 德国银行协会5日警告说，在进入2010年之际，超过2500万张德国银行卡可能遭到类似“千年虫”软件漏洞的损害，导致电脑芯片无法识别年份“2010”，从而让使用自动取款机或在德国境内甚至境外分行取款、用卡消费的银行客户无法使用银行卡。 跳过2010直至2016年 不知道什么原因，澳大利亚昆士兰银行卡处理中心的计算机时钟，在越过2009年12月31日之后，反常地直接翻至2016年1月1日，掠过了中间的6个年头。然而，出现这样的状况会有什么样的后果呢？ 最直接的，大量的昆士兰州的企业依靠该银行处理他们的信用卡支付业务，而大量信用卡在2016年之前就已经到期失效，所以几乎所有的交易都面临瘫痪。不过虽然还没有查明原因，银行已经启动人工批准流程，以保证经济的正常运转。 2038年问题32位的Unix操作系统和Linux操作系统时间溢出问题又称为2038年问题（the Year 2038 problem）。如果你想知道什么是2038问题的话，你需要知道一些技术上的东西。这个bug是由用来写Unix/Linux的C语言引起的，C语言中用 time_t 来代表时间和日期，time_t 是整数（int）型的，它用来记载从1970年1月1日到2000年所经历的秒数。 这个数据是以32位存储的，第一位是符号位，其余的31位用来存数字，而这31位数字可以存储的最大数字为2147483647。 从1970年开始计算，这31位的数字可以表示的秒数最多可以用到2038年01月19日03时14分07秒，当时间到达这个数字的时候系统将会出现问题，到时候数字不会自动增加，而是会变为-2147483648，而这串数字代表的时间是1901年12月13日20时45分52秒，这会导致很多的程序出现问题，甚至崩溃。 不过现在64位系统已经成为主流，这个问题现在是可以避免的。","categories":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.epsopn.top/categories/HTTP/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"}]},{"title":"mac安装Hexo","slug":"mac安装Hexo","date":"2020-05-23T08:57:30.000Z","updated":"2020-05-29T16:11:38.000Z","comments":true,"path":"archives/71256fba.html","link":"","permalink":"https://www.epsopn.top/archives/71256fba.html","excerpt":"安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli","text":"安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli 这个安装的时候，我遇到了这样的报错： 而且在用 $ hexo init 这个时候，会出现command not found。命令未找到。 这报错的原因在于执行安装命令的时候我没有获取管理员权限。请使用： $ sudo -s 获取管理员权限在重新安装hexo执行安装命令。 之后重启终端就可以正常使用了。","categories":[{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"}]},{"title":"SpringMVC框架介绍","slug":"SpringMVC框架介绍","date":"2020-05-13T13:18:11.000Z","updated":"2020-05-29T16:10:55.000Z","comments":true,"path":"archives/e2a11bfc.html","link":"","permalink":"https://www.epsopn.top/archives/e2a11bfc.html","excerpt":"1. SpringMVC框架简介MVC = Model（数据模型） + View（视图） + Controller（控制器） SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！","text":"1. SpringMVC框架简介MVC = Model（数据模型） + View（视图） + Controller（控制器） SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！ 在传统的Java EE开发模式下，是使用Servlet组件作为项目的控制器，假设项目中有“用户注册”的功能，则可能需要创建UserRegServlet，如果还有“用户登录”功能，则可能需要创建UserLoginServlet，以此类推，每增加1个新的功能，就需要开发一个新的Servlet，如果某个项目中有100个功能，就需要开发100个Servlet，如果有500个功能，就需要开发500个Servlet！而且，每个Servlet可能还需要添加相关的配置，所以，一旦Servlet的数量过多，就会不利于管理和维护，并且，在服务器运行时，需要创建很多Servlet类的对象，会消耗较多的内存空间。 另外，Java EE的许多API并不简洁，在使用时并不是那么方便！ 使用SpringMVC框架，以上问题都可以被解决！ 2. SpringMVC核心组件 DispatcherServlet：前端控制器，用于接收所有请求； HandlerMapping：用于配置请求路径与Controller组件的对应关系； Controller：控制器，具体处理请求的组件； ModelAndView：Controller组件处理完请求后得到的结果，由数据与视图名称组成； ViewResolver：视图解析器，可根据视图名称确定需要使用的视图组件。","categories":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/categories/SpringMVC/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/tags/SpringMVC/"}]},{"title":"SpringBoot简介","slug":"SpringBoot简介","date":"2020-05-09T14:30:52.000Z","updated":"2020-05-29T16:03:20.000Z","comments":true,"path":"archives/c35b400a.html","link":"","permalink":"https://www.epsopn.top/archives/c35b400a.html","excerpt":"1. SpringBoot简介SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。 SpringBoot的核心思想是约定大于配置，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将DispatcherServlet的映射路径配置为/*，则使用者就按照这个配置值使用即可，无须自已编写配置！","text":"1. SpringBoot简介SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。 SpringBoot的核心思想是约定大于配置，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将DispatcherServlet的映射路径配置为/*，则使用者就按照这个配置值使用即可，无须自已编写配置！ 2. 使用SpringBoot开发用户注册登录2.1. 创建SpringBoot项目如果要创建SpringBoot项目，常规的创建方式有： 基于SpringBoot的父级项目来创建新的项目； 使用开发工具的创建向导来创建； 从Spring网站创建项目并导入到本地开发工具中。 本次使用以上介绍的第3种做法，首先，打开https://start.spring.io/网站，在网页中主要确定几项： 所使用的SpringBoot版本； Group与Artifact，相当于在Eclipse中创建Maven项目时指定的Group Id和Artifact Id； 强烈建议不要修改默认生成的Package name，默认值就是由填写的Group和Artifact值决定的； 确定使用jar或war； 添加必要的依赖。 完成后，点击页面中的Generate按钮就可以开始生成项目并自动下载该项目！ 解压下载得到的压缩包文件，将得到项目文件夹，为了便于管理项目，推荐将该文件夹移动到Workspace中，避免以后找不到这个项目了。 然后，在Eclipse中，通过Import &gt; Existing Maven Projects导入项目，默认的项目结构并不完整，可以暂且不管，后续项目更新完成后就会恢复正常，导入项目后，项目会开始自动下载所需的依赖，这个过程中只需要保证能够连接到Maven服务器，确保能下载所依赖的jar包，然后，等待即可，如果项目没有开始自动下载，对项目点右键，选择Maven &gt; Update Project更新即可。 建议使用4.11及以上版本的Eclipse，如果使用的是较低版本的Eclipse，在pom.xml文件中可能报错，这是因为较低版本的Eclipse中内置的Maven配置版本较低导致的，而较高版本的Eclipse中内置的Maven配置版本较高，就不会出错，并且，即使出错，也不影响正常的开发和运行。 2.2. 检查项目是否基本可用展开项目中的src/test/java，其中，已经存在cn.tedu.sample包，这个包的名称是创建项目时填写的Group和Artifact决定的，这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中！在包中已经存在SampleApplicationTests类，类中有contextLoads()方法，通过单元测试的方式，直接测试方法，如果能成功运行，则表示测试环境是正常的！ 展开项目中的src/main/java，其中，已经存在cn.tedu.sample包，这个包的名称是创建项目时填写的Group和Artifact决定的，这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中！在包中已经存在SampleApplication类，它是项目的启动类，类中有main()方法，这个main()就是整个项目的启动方法。 2.3. 在项目中添加静态页面在SpringBoot项目中，在src/main/resources下，默认就存在static文件夹，这个文件就是SpringBoot项目用于存放静态资源（网页文件、css文件、js文件、图片文件等）的文件夹！ 所以，可以在static文件夹下创建index.html文件，内容可以自行设计，完成后，启动项目，在浏览器中输入http://localhost:8080/即可访问。 因为SpringBoot框架内置了Tomcat，每个项目都有独立的Tomcat，在部署项目时，会将Context Path设置为&quot;&quot;，即空字符串，所以，在SpringBoot的启动日志中也会有： Tomcat started on port(s): 8080 (http) with context path &#39;&#39;所以，最后，在执行访问时，URL的端口号右侧不需要添加项目名称！ 另外，index.html是默认的资源名称，所以，如果需要访问的就是这个资源，则URL中也不必显式的指定资源名。 在SpringBoot项目中，在src/main/resources下默认即存在application.properties文件，这个文件是整个项目的配置文件，后续相关的配置都需要写在这个文件中！例如，可以在该文件中添加配置： server.port=80就可以把Tomcat的端口号改为80，如果使用的是Windows操作系统，重新启动项目，通过http://localhost/即可访问刚才的页面，因为80端口是HTTP协议的默认端口，所以，当尝试提交HTTP请求时，如果没有显式的指定端口号，会视为尝试访问服务器的80端口！如果使用的是Mac OS或Linux操作系统，这些操作系统对80端口的使用是非常严格的，需要自行在操作系统中进行相关配置后，才允许使用80端口！ 注意：如果自行指定端口，推荐使用4位数甚至5位的端口号，因为2位数和3位数的许多端口号都被某些协议默认使用了，如果使用这些端口号，就会导致各服务产生冲突，某些服务将无法正常使用！ 另外，如果在SpringBoot项目中，还会使用到Thymeleaf等模版技术，应该将模版页面放在src/main/resources/templates/文件夹下。 2.4. 使用控制器接收客户端提交的请求在src/main/java下的cn.tedu.sample包是SpringBoot项目默认组件扫描的根包，所以，在项目中创建的所有组件类（需要由Spring框架创建并管理的）必须放在这个包或其子包中！ 在cn.tedu.sample包中创建HelloController控制器，在类的声明之前添加@Controller注解，并在类中添加处理请求的方法，例如： package cn.tedu.sample; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HelloController { @RequestMapping(\"hello\") @ResponseBody public String showHello() { return \"SpringBoot框架真好用！！！\"; } } 编写完成后，重启项目，在浏览器中输入http://localhost:8080/hello即可请求到以上控制器中的资源！ SpringBoot项目默认已经配置了DispatcherServlet，并且，映射的路径是/*，所以，在配置请求路径时，并不要求路径中的资源是以.do作为后缀，同时，也就意味着当前项目中所有请求路径都会被SpringMVC框架所处理！ SpringBoot框架将所有内置的框架、开发环境中的编码已经全部设置为UTF-8了，所以，在使用SpringBoot时，默认都是可以直接支持中文的！ 在编写控制器时，还可以使用一些新的注解： @RestController：该注解可以用于替代此前使用的@Controller，使用该注解后，当前控制器类中所有的方法默认都是响应正文，相当于每个方法之前都添加了@ResponseBody，所以，可以简单的理解为@RestController = @Controller + @ResponseBody； @GetMapping：该注解相当于@RequestMapping(method=RequestMethod.GET)； @PostMapping：该注解相当于@RequestMapping(method=RequestMethod.POST)； 以上注解并不是SpringBoot项目新增的，而是SpringMVC框架中本来就有的，但是，在传统的SpringMVC框架中，这些注解是不能直接使用的，需要另行配置，而SpringBoot默认已经完成了这些配置，所以，可以直接使用！ 2.5. 配置数据库连接在SpringBoot项目中，如果涉及数据库编程，需要自行添加数据库相关的依赖，虽然SpringBoot默认能集成绝大部分常规依赖，但是，它无法直接确定每个开发者使用的是哪种数据库、哪种数据库编程时使用的框架，所以，是需要自行添加的！ &lt;dependency> &lt;groupId>org.mybatis.spring.boot&lt;/groupId> &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId> &lt;version>2.1.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;scope>runtime&lt;/scope> &lt;/dependency> 当SpringBoot项目添加了数据库相关的依赖后，启动项目时，就会自动尝试读取数据库连接的配置信息，如果没有配置信息，则启动项目会报错！ 所以，需要在application.properties中添加配置： spring.datasource.url=jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai spring.datasource.username=root spring.datasource.password=root 添加以上配置后，就可以正常启动项目，但是，启动项目时，只会读取配置信息，并不会执行连接，所以，即使以上配置信息中存在错误的值，也不影响项目启动，同样，也不无法得知以上配置信息是否正确！ 所以，接下来，需要尝试连接到数据库，以确认以上配置信息是否正确！可以在src/test/java中cn.tedu.sample中的SampleApplicationTests测试类编写并执行单元测试： @RunWith(SpringRunner.class) @SpringBootTest public class SampleApplicationTests { @Test public void contextLoads() { } @Autowired private DataSource dataSource; @Test public void getConnection() throws SQLException { System.err.println(dataSource.getConnection()); } } 2.6. 实现注册相关的数据库编程首先，需要创建用户数据类，用于封装用户数据的属性，所以，在src/main/java的cn.tedu.sample包下创建User类： public class User { private Integer id; private String username; private String password; private Integer age; private String phone; private String email; // 补充SET/GET方法，toString()方法 } 注册功能应该由2项数据操作所组成：先根据用户尝试注册的用户名查询数据，如果查询到某个结果，则表示该用户名已经被占用，不允许插入新的用户数据，如果查询不到结果，则该用户名没有被人占用，将用户尝试注册的信息插入到数据库中即可！所以，涉及操作分别是根据用户名查询用户数据和插入用户数据。 先cn.tedu.sample包中创建UserMapper接口，并在接口中添加抽象方法： package cn.tedu.sample; public interface UserMapper { Integer addnew(User user); User findByUsername(String username); } 写完接口后，需要配置接口文件的位置，配置的做法可以是： 在接口的声明之前添加@Mapper注解，使用这种做法，就要求每一个接口都需要添加该注解； 在启动类（SampleApplication）的声明之前，添加@MapperScan(&quot;接口所在的包&quot;)注解，然后，所有接口都放在配置的包中即可！ 一般推荐使用以上的第2种做法，例如： @SpringBootApplication @MapperScan(\"cn.tedu.sample\") public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } 接下来，就需要配置各抽象方法对应的SQL语句，首先，还是在src/main/resources下创建mappers文件夹，并在该文件中粘贴得到UserMapper.xml，用于配置SQL语句。 在UserMapper.xml中配置SQL语句： &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE mapper PUBLIC \"-//ibatis.apache.org//DTD Mapper 3.0//EN\" \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\"> &lt;mapper namespace=\"cn.tedu.sample.UserMapper\"> &lt;insert id=\"addnew\" useGeneratedKeys=\"true\" keyProperty=\"id\"> INSERT INTO t_user ( username, password, age, phone, email ) VALUES ( #{username}, #{password}, #{age}, #{phone}, #{email} ) &lt;/insert> &lt;select id=\"findByUsername\" resultType=\"cn.tedu.sample.User\"> SELECT * FROM t_user WHERE username=#{username} &lt;/select> &lt;/mapper> 在执行单元测试之前，还需要指定这些XML文件的位置，需要在application.properties中进行配置： mybatis.mapper-locations=classpath:mappers/*.xml最后，编写并执行单元测试： @RunWith(SpringRunner.class) @SpringBootTest public class SampleApplicationTests { @Test public void contextLoads() { } @Autowired private DataSource dataSource; @Autowired private UserMapper userMapper; @Test public void addnew() { User user = new User(); user.setUsername(\"lucy02\"); user.setPassword(\"123456\"); user.setAge(32); user.setPhone(\"13900139002\"); user.setEmail(\"lucy02@foxmail.com\"); Integer rows = userMapper.addnew(user); System.err.println(\"rows=\" + rows); System.err.println(user); } @Test public void findByUsername() { String username = \"lucy\"; User user = userMapper.findByUsername(username); System.err.println(user); } @Test public void getConnection() throws SQLException { System.err.println(dataSource.getConnection()); } } 至此，关于注册时涉及的数据库编程的相关功能就已经完成！ 其实，还可以在抽象方法之前添加注解来配置SQL语句及相关内容，例如： public interface UserMapper { @Insert(\"INSERT INTO t_user (username, password, age, phone, email) VALUES (#{username}, #{password}, #{age}, #{phone}, #{email})\") Integer addnew(User user); @Select(\"SELECT * FROM t_user WHERE username=#{username}\") User findByUsername(String username); } 这种做法也不是SpringBoot集成MyBatis才可以做到的，直接使用MyBatis也可以实现，但是，需要额外的配置，而SpringBoot已经完成了相关的配置，所以，可以直接使用！ 2.7. 开发处理注册的控制器首先，需要创建封装返回结果的JsonResult类，在类中声明需要响应到客户端的JSON数据中的属性： public class JsonResult { private Integer state; } 建议新创建UserController控制器类，在这个控制器类中处理请求： @RestController public class UserController { @Autowired private UserMapper userMapper; @RequestMapping(\"reg\") public JsonResult reg(User user) { User result = userMapper.findByUsername(user.getUsername()); if (result == null) { userMapper.addnew(user); return new JsonResult(1); } else { return new JsonResult(2); } } } 完成后，重新启动项目，在浏览器中访问http://localhost:8080/reg?username=david&amp;password=1234执行测试。 2.8. 前端页面先从前序项目中复制reg.html和jQuery文件到static文件夹下。 为注册的表单设置ID值： &lt;form id=\"form-reg\"> 修改按钮： &lt;input type=\"button\" onclick=\"reg()\" value=\"注册\" /> 然后，引用jQuery文件，并编写代码以提交请求、处理结果： &lt;script type=\"text/javascript\" src=\"jquery-3.4.1.min.js\">&lt;/script> &lt;script type=\"text/javascript\"> function reg() { $.ajax({ \"url\":\"/reg\", \"data\":$(\"#form-reg\").serialize(), \"type\":\"post\", \"dataType\":\"json\", \"success\":function (json) { if (json.state == 1) { alert(\"注册成功！\"); } else { alert(\"注册失败！您尝试注册的用户名已经被占用！\"); } } }); } &lt;/script>","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/categories/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/tags/SpringBoot/"}]},{"title":"今天都干什么了？","slug":"今天都干什么了？","date":"2020-05-06T14:05:36.000Z","updated":"2020-05-26T11:45:38.000Z","comments":true,"path":"archives/ab8a344f.html","link":"","permalink":"https://www.epsopn.top/archives/ab8a344f.html","excerpt":"今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌","text":"今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌","categories":[{"name":"问号问号","slug":"问号问号","permalink":"https://www.epsopn.top/categories/%E9%97%AE%E5%8F%B7%E9%97%AE%E5%8F%B7/"}],"tags":[{"name":"许多的问号","slug":"许多的问号","permalink":"https://www.epsopn.top/tags/%E8%AE%B8%E5%A4%9A%E7%9A%84%E9%97%AE%E5%8F%B7/"}]},{"title":"Spring框架的介绍","slug":"Spring框架的介绍","date":"2020-05-05T15:32:57.000Z","updated":"2020-05-29T16:10:57.000Z","comments":true,"path":"archives/89a211cf.html","link":"","permalink":"https://www.epsopn.top/archives/89a211cf.html","excerpt":"1. Spring框架简介框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！ 在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！ Spring框架主要是用于创建对象和管理对象的！","text":"1. Spring框架简介框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！ 在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！ Spring框架主要是用于创建对象和管理对象的！ 使用Spring框架的原因Spring框架的主要作用之一就是创建对象，但是，创建对象本身是一件非常简单的事情，例如： User user = new User(); 但是，在实际开发项目时，一个项目中的类会非常多，需要创建的对象也非常多，并且，类与类之间的依赖会比较复杂，如果直接创建对象，会导致耦合度较高，不利于项目的管理和维护！ Spring框架的优点都有什么？ 简化编程：Spring对JavaEE中的一些比较繁琐的API做了简化和封装，使用封装之后的API不仅代码更简洁，而且质量更高。 解耦：对象之间的依赖关系由容器来统一管理、降低了对象之间的耦合度、方便代码的维护，同时也实现了资源的统一调度和管理。 支持面向切面编程AOP：可以方便对程序添加通用的服务，比如事务、权限管理等。 集成其它框架：不发明重复的轮子，集成其它一些优秀框架、使开发者用统一的并且更加简洁的方式来使用这些框架。 轻量：可以依赖项目的实际要求，有选择的使用Spring框架的全部或者一部分。 2. 通过Spring框架创建对象，并从中获取所需的对象新建一个Maven Project，在创建过程中，勾选中Create a simple project选项，在Group Id一栏输入cn.tedu，在Artifact Id一栏输入spring01，下方的Packaging选择war，刚创建好的项目因为没有web.xml文件会报错，生成该文件即可。 在Packaing一栏也可以选择jar，并不一定必须选择war，后续会要求必须使用war，所以，提前体验也是可以的！ 打开项目的pom.xml文件，在其中添加Spring的依赖！在使用Spring框架时，需要添加的依赖是spring-context，具体代码是： &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.1.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 当需要查询某个依赖时，在浏览器中搜索“mvn”关键字，打开 http://www.mvnrepository.com 网站，并搜索依赖的名称，在查询结果中找到匹配度最高的依赖，选择版本，就可以查询到依赖的代码。 然后，将下载的Spring配置文件的压缩包解压，得到applicationContext.xml文件，这个文件就是Spring的配置文件，将它复制到项目的src/main/resources文件夹下！ 如果该文件提示错误，可以不处理，并不影响开发和运行！ 可以在Spring的配置文件中配置由Spring创建并管理的对象！ 假设需要由Spring创建一个Date类的对象，则在该文件中添加： &lt;!-- id属性：自定义名称，后续将根据这个名称来获取对象，推荐使用类名将首字母改为小写 --> &lt;!-- class属性：需要Spring框架创建哪个类的对象，取值是类的全名，即包名与类名 --> &lt;bean id=\"date\" class=\"java.util.Date\">&lt;/bean> 至此，已经配置好了需要由Spring管理的对象，后续，当该配置文件被加载时，Spring框架就会创建java.util.Date类的对象，开发人员也可以通过id属性值date获取该对象！","categories":[{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/categories/JavaSpring/"}],"tags":[{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/tags/JavaSpring/"}]},{"title":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置","slug":"访问被api域名白名单拒绝，请检查你的安全域名设置","date":"2020-05-04T02:39:40.000Z","updated":"2020-05-29T16:12:06.000Z","comments":true,"path":"archives/218fe6f9.html","link":"","permalink":"https://www.epsopn.top/archives/218fe6f9.html","excerpt":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置 大致情况： 刚刚用github成功解析了我的新域名，缺发现了这个错误 Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.","text":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置 大致情况： 刚刚用github成功解析了我的新域名，缺发现了这个错误 Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置. 解决办法： 只需要在leancloud里面把你新的域名地址添加进来就ok了 在设置&gt;&gt;安全中心&gt;&gt;web安全域名 这样问题就解决了。","categories":[{"name":"遇到的问题","slug":"遇到的问题","permalink":"https://www.epsopn.top/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://www.epsopn.top/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"第一次搭建博客","slug":"第一个搭建博客","date":"2020-05-03T10:11:03.000Z","updated":"2020-05-29T16:12:40.000Z","comments":true,"path":"archives/5ff0b802.html","link":"","permalink":"https://www.epsopn.top/archives/5ff0b802.html","excerpt":"第一次搭建博客遇到的问题 身为小白的第一个搭建个人博客，中间的坑是在是太多了","text":"第一次搭建博客遇到的问题 身为小白的第一个搭建个人博客，中间的坑是在是太多了 由于对软件的不熟悉装载了node.js14.1.0版本导致了一直无法上传到git里面，查询了很多解决办法，因为是很新的版本，这个错误应该还没有遇到过。纠结了两天的时间，最后在群中得知，可能是版本过高导致，我又卸载装v12版本，果然两天没有搞定的错误就这样搞定了。 接下来的就比较好弄了，一步一步的尝试写来，稀里糊涂的就做了个差不多， 总结一句话： 不到万不得已，最后不要升级，毕竟bug太多，没有前人踩路，容易摔死","categories":[{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"}]}],"categories":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.epsopn.top/categories/HTTP/"},{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/categories/SpringMVC/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/categories/SpringBoot/"},{"name":"问号问号","slug":"问号问号","permalink":"https://www.epsopn.top/categories/%E9%97%AE%E5%8F%B7%E9%97%AE%E5%8F%B7/"},{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/categories/JavaSpring/"},{"name":"遇到的问题","slug":"遇到的问题","permalink":"https://www.epsopn.top/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/tags/SpringMVC/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/tags/SpringBoot/"},{"name":"许多的问号","slug":"许多的问号","permalink":"https://www.epsopn.top/tags/%E8%AE%B8%E5%A4%9A%E7%9A%84%E9%97%AE%E5%8F%B7/"},{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/tags/JavaSpring/"},{"name":"分享","slug":"分享","permalink":"https://www.epsopn.top/tags/%E5%88%86%E4%BA%AB/"}]}