{"meta":{"title":"阿呆の小客栈","subtitle":"z-p","description":"嗨，你好，我很有趣,发布&解决&收获","author":"阿呆","url":"https://www.epsopn.top","root":"/"},"pages":[{"title":"相册","date":"2020-05-29T14:37:49.000Z","updated":"2020-05-29T17:41:16.000Z","comments":true,"path":"Gallery/index.html","permalink":"https://www.epsopn.top/Gallery/index.html","excerpt":"","text":")) )))))"},{"title":"categories","date":"2020-05-03T11:06:11.000Z","updated":"2020-05-03T11:06:12.000Z","comments":true,"path":"categories/index-1.html","permalink":"https://www.epsopn.top/categories/index-1.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-03T05:57:53.000Z","updated":"2020-05-29T17:31:02.000Z","comments":false,"path":"categories/index.html","permalink":"https://www.epsopn.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-29T17:42:33.000Z","updated":"2020-05-29T17:34:14.000Z","comments":true,"path":"about/index.html","permalink":"https://www.epsopn.top/about/index.html","excerpt":"","text":"关于我以后这里就是咱的博客了………………………….. 一名普普通通的小白 稀里糊涂做了博客￣□￣｜｜ 大学毕业了 喜欢吃………….. 喜欢动漫……………. 喜欢工作！！！热爱自由！！！！ 奥利给！！！（..） 关于刻薄2020.0502建立客栈，感谢………………… 2020.0503增加了音乐播放的功能"},{"title":"","date":"2020-05-29T17:13:02.000Z","updated":"2020-05-05T10:05:24.000Z","comments":true,"path":"about/site.html","permalink":"https://www.epsopn.top/about/site.html","excerpt":"","text":"关于我以后这里就是咱的博客了………………………….. 一名普普通通的小白 稀里糊涂做了博客￣□￣｜｜ 大学毕业了 喜欢吃………….. 喜欢动漫……………. 喜欢工作！！！热爱自由！！！！ 奥利给！！！（..） 关于刻薄2020.0502建立客栈，感谢………………… 2020.0503增加了音乐播放的功能"},{"title":"关于我","date":"2020-05-02T13:55:11.000Z","updated":"2020-05-05T10:15:34.000Z","comments":true,"path":"about/index1.html","permalink":"https://www.epsopn.top/about/index1.html","excerpt":"","text":"山东的，刚刚大学毕业 现在在济南"},{"title":"可爱的女孩子","date":"2020-05-23T07:07:32.000Z","updated":"2020-05-09T15:12:54.000Z","comments":true,"path":"girls/index.html","permalink":"https://www.epsopn.top/girls/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-23T07:07:32.000Z","updated":"2020-05-05T12:06:32.000Z","comments":true,"path":"data/sentences.json","permalink":"https://www.epsopn.top/data/sentences.json","excerpt":"","text":"[{\"content\":\"Hello, World!\",\"author\":\"Brian Kernighan\",\"from\":\"The C Programming Language\"},{\"content\":\"我们一日日度过的所谓日常，实际上可能是接连不断的奇迹。\",\"from\":\"日常\"},{\"content\":\"是啊，我所爱的，即非群星，也非银河。\",\"author\":\"云游君\",\"from\":\"yunyoujun.cn\"},{\"content\":\"隐约雷鸣 阴霾天空 但盼风雨来 能留你在此\",\"from\":\"万叶集·雷神短歌\"}]"},{"title":"我的小伙伴们","date":"2020-05-01T05:06:06.000Z","updated":"2020-05-13T13:50:40.000Z","comments":true,"path":"links/index.html","permalink":"https://www.epsopn.top/links/index.html","excerpt":"","text":""},{"title":"友情鏈接","date":"2020-05-29T16:24:03.000Z","updated":"2020-05-29T17:44:00.000Z","comments":true,"path":"link/index.html","permalink":"https://www.epsopn.top/link/index.html","excerpt":"","text":""},{"title":"音乐","date":"2020-05-29T16:47:47.000Z","updated":"2020-05-29T17:31:52.000Z","comments":true,"path":"music/index.html","permalink":"https://www.epsopn.top/music/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-03T05:53:36.000Z","updated":"2020-05-29T17:30:00.000Z","comments":false,"path":"tags/index.html","permalink":"https://www.epsopn.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mac安装Hexo","slug":"mac安装Hexo","date":"2020-05-23T08:57:30.000Z","updated":"2020-05-29T16:11:38.000Z","comments":true,"path":"archives/71256fba.html","link":"","permalink":"https://www.epsopn.top/archives/71256fba.html","excerpt":"安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli","text":"安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli 这个安装的时候，我遇到了这样的报错： 而且在用 $ hexo init 这个时候，会出现command not found。命令未找到。 这报错的原因在于执行安装命令的时候我没有获取管理员权限。请使用： $ sudo -s 获取管理员权限在重新安装hexo执行安装命令。 之后重启终端就可以正常使用了。","categories":[{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"}]},{"title":"SpringMVC框架介绍","slug":"SpringMVC框架介绍","date":"2020-05-13T13:18:11.000Z","updated":"2020-05-29T16:10:55.000Z","comments":true,"path":"archives/e2a11bfc.html","link":"","permalink":"https://www.epsopn.top/archives/e2a11bfc.html","excerpt":"1. SpringMVC框架简介MVC = Model（数据模型） + View（视图） + Controller（控制器） SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！","text":"1. SpringMVC框架简介MVC = Model（数据模型） + View（视图） + Controller（控制器） SpringMVC框架主要解决了VC之间的交互问题！在SpringMVC框架中，并不关心M的问题！ 在传统的Java EE开发模式下，是使用Servlet组件作为项目的控制器，假设项目中有“用户注册”的功能，则可能需要创建UserRegServlet，如果还有“用户登录”功能，则可能需要创建UserLoginServlet，以此类推，每增加1个新的功能，就需要开发一个新的Servlet，如果某个项目中有100个功能，就需要开发100个Servlet，如果有500个功能，就需要开发500个Servlet！而且，每个Servlet可能还需要添加相关的配置，所以，一旦Servlet的数量过多，就会不利于管理和维护，并且，在服务器运行时，需要创建很多Servlet类的对象，会消耗较多的内存空间。 另外，Java EE的许多API并不简洁，在使用时并不是那么方便！ 使用SpringMVC框架，以上问题都可以被解决！ 2. SpringMVC核心组件 DispatcherServlet：前端控制器，用于接收所有请求； HandlerMapping：用于配置请求路径与Controller组件的对应关系； Controller：控制器，具体处理请求的组件； ModelAndView：Controller组件处理完请求后得到的结果，由数据与视图名称组成； ViewResolver：视图解析器，可根据视图名称确定需要使用的视图组件。","categories":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/categories/SpringMVC/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/tags/SpringMVC/"}]},{"title":"SpringBoot简介","slug":"SpringBoot简介","date":"2020-05-09T14:30:52.000Z","updated":"2020-05-29T16:03:20.000Z","comments":true,"path":"archives/c35b400a.html","link":"","permalink":"https://www.epsopn.top/archives/c35b400a.html","excerpt":"1. SpringBoot简介SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。 SpringBoot的核心思想是约定大于配置，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将DispatcherServlet的映射路径配置为/*，则使用者就按照这个配置值使用即可，无须自已编写配置！","text":"1. SpringBoot简介SpringBoot是一个默认就集成了绝大部分常规开发时都使用的依赖、完成了绝大部分的常规配置、基于SpringMVC的框架。 SpringBoot的核心思想是约定大于配置，因为在传统的SSM项目中，创建项目后，需要自定义大量的配置，而不同的项目的配置却大同小异，甚至就是完全相同，所以，SpringBoot就直接完成了相关的配置，并要求使用者遵循配置值的约定，例如它将DispatcherServlet的映射路径配置为/*，则使用者就按照这个配置值使用即可，无须自已编写配置！ 2. 使用SpringBoot开发用户注册登录2.1. 创建SpringBoot项目如果要创建SpringBoot项目，常规的创建方式有： 基于SpringBoot的父级项目来创建新的项目； 使用开发工具的创建向导来创建； 从Spring网站创建项目并导入到本地开发工具中。 本次使用以上介绍的第3种做法，首先，打开https://start.spring.io/网站，在网页中主要确定几项： 所使用的SpringBoot版本； Group与Artifact，相当于在Eclipse中创建Maven项目时指定的Group Id和Artifact Id； 强烈建议不要修改默认生成的Package name，默认值就是由填写的Group和Artifact值决定的； 确定使用jar或war； 添加必要的依赖。 完成后，点击页面中的Generate按钮就可以开始生成项目并自动下载该项目！ 解压下载得到的压缩包文件，将得到项目文件夹，为了便于管理项目，推荐将该文件夹移动到Workspace中，避免以后找不到这个项目了。 然后，在Eclipse中，通过Import &gt; Existing Maven Projects导入项目，默认的项目结构并不完整，可以暂且不管，后续项目更新完成后就会恢复正常，导入项目后，项目会开始自动下载所需的依赖，这个过程中只需要保证能够连接到Maven服务器，确保能下载所依赖的jar包，然后，等待即可，如果项目没有开始自动下载，对项目点右键，选择Maven &gt; Update Project更新即可。 建议使用4.11及以上版本的Eclipse，如果使用的是较低版本的Eclipse，在pom.xml文件中可能报错，这是因为较低版本的Eclipse中内置的Maven配置版本较低导致的，而较高版本的Eclipse中内置的Maven配置版本较高，就不会出错，并且，即使出错，也不影响正常的开发和运行。 2.2. 检查项目是否基本可用展开项目中的src/test/java，其中，已经存在cn.tedu.sample包，这个包的名称是创建项目时填写的Group和Artifact决定的，这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中！在包中已经存在SampleApplicationTests类，类中有contextLoads()方法，通过单元测试的方式，直接测试方法，如果能成功运行，则表示测试环境是正常的！ 展开项目中的src/main/java，其中，已经存在cn.tedu.sample包，这个包的名称是创建项目时填写的Group和Artifact决定的，这个包的名称是不允许修改的，并且，项目中所有的单元测试类都必须放在这个包或其子包中！在包中已经存在SampleApplication类，它是项目的启动类，类中有main()方法，这个main()就是整个项目的启动方法。 2.3. 在项目中添加静态页面在SpringBoot项目中，在src/main/resources下，默认就存在static文件夹，这个文件就是SpringBoot项目用于存放静态资源（网页文件、css文件、js文件、图片文件等）的文件夹！ 所以，可以在static文件夹下创建index.html文件，内容可以自行设计，完成后，启动项目，在浏览器中输入http://localhost:8080/即可访问。 因为SpringBoot框架内置了Tomcat，每个项目都有独立的Tomcat，在部署项目时，会将Context Path设置为&quot;&quot;，即空字符串，所以，在SpringBoot的启动日志中也会有： Tomcat started on port(s): 8080 (http) with context path &#39;&#39;所以，最后，在执行访问时，URL的端口号右侧不需要添加项目名称！ 另外，index.html是默认的资源名称，所以，如果需要访问的就是这个资源，则URL中也不必显式的指定资源名。 在SpringBoot项目中，在src/main/resources下默认即存在application.properties文件，这个文件是整个项目的配置文件，后续相关的配置都需要写在这个文件中！例如，可以在该文件中添加配置： server.port=80就可以把Tomcat的端口号改为80，如果使用的是Windows操作系统，重新启动项目，通过http://localhost/即可访问刚才的页面，因为80端口是HTTP协议的默认端口，所以，当尝试提交HTTP请求时，如果没有显式的指定端口号，会视为尝试访问服务器的80端口！如果使用的是Mac OS或Linux操作系统，这些操作系统对80端口的使用是非常严格的，需要自行在操作系统中进行相关配置后，才允许使用80端口！ 注意：如果自行指定端口，推荐使用4位数甚至5位的端口号，因为2位数和3位数的许多端口号都被某些协议默认使用了，如果使用这些端口号，就会导致各服务产生冲突，某些服务将无法正常使用！ 另外，如果在SpringBoot项目中，还会使用到Thymeleaf等模版技术，应该将模版页面放在src/main/resources/templates/文件夹下。 2.4. 使用控制器接收客户端提交的请求在src/main/java下的cn.tedu.sample包是SpringBoot项目默认组件扫描的根包，所以，在项目中创建的所有组件类（需要由Spring框架创建并管理的）必须放在这个包或其子包中！ 在cn.tedu.sample包中创建HelloController控制器，在类的声明之前添加@Controller注解，并在类中添加处理请求的方法，例如： package cn.tedu.sample; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HelloController { @RequestMapping(\"hello\") @ResponseBody public String showHello() { return \"SpringBoot框架真好用！！！\"; } } 编写完成后，重启项目，在浏览器中输入http://localhost:8080/hello即可请求到以上控制器中的资源！ SpringBoot项目默认已经配置了DispatcherServlet，并且，映射的路径是/*，所以，在配置请求路径时，并不要求路径中的资源是以.do作为后缀，同时，也就意味着当前项目中所有请求路径都会被SpringMVC框架所处理！ SpringBoot框架将所有内置的框架、开发环境中的编码已经全部设置为UTF-8了，所以，在使用SpringBoot时，默认都是可以直接支持中文的！ 在编写控制器时，还可以使用一些新的注解： @RestController：该注解可以用于替代此前使用的@Controller，使用该注解后，当前控制器类中所有的方法默认都是响应正文，相当于每个方法之前都添加了@ResponseBody，所以，可以简单的理解为@RestController = @Controller + @ResponseBody； @GetMapping：该注解相当于@RequestMapping(method=RequestMethod.GET)； @PostMapping：该注解相当于@RequestMapping(method=RequestMethod.POST)； 以上注解并不是SpringBoot项目新增的，而是SpringMVC框架中本来就有的，但是，在传统的SpringMVC框架中，这些注解是不能直接使用的，需要另行配置，而SpringBoot默认已经完成了这些配置，所以，可以直接使用！ 2.5. 配置数据库连接在SpringBoot项目中，如果涉及数据库编程，需要自行添加数据库相关的依赖，虽然SpringBoot默认能集成绝大部分常规依赖，但是，它无法直接确定每个开发者使用的是哪种数据库、哪种数据库编程时使用的框架，所以，是需要自行添加的！ &lt;dependency> &lt;groupId>org.mybatis.spring.boot&lt;/groupId> &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId> &lt;version>2.1.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;scope>runtime&lt;/scope> &lt;/dependency> 当SpringBoot项目添加了数据库相关的依赖后，启动项目时，就会自动尝试读取数据库连接的配置信息，如果没有配置信息，则启动项目会报错！ 所以，需要在application.properties中添加配置： spring.datasource.url=jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai spring.datasource.username=root spring.datasource.password=root 添加以上配置后，就可以正常启动项目，但是，启动项目时，只会读取配置信息，并不会执行连接，所以，即使以上配置信息中存在错误的值，也不影响项目启动，同样，也不无法得知以上配置信息是否正确！ 所以，接下来，需要尝试连接到数据库，以确认以上配置信息是否正确！可以在src/test/java中cn.tedu.sample中的SampleApplicationTests测试类编写并执行单元测试： @RunWith(SpringRunner.class) @SpringBootTest public class SampleApplicationTests { @Test public void contextLoads() { } @Autowired private DataSource dataSource; @Test public void getConnection() throws SQLException { System.err.println(dataSource.getConnection()); } } 2.6. 实现注册相关的数据库编程首先，需要创建用户数据类，用于封装用户数据的属性，所以，在src/main/java的cn.tedu.sample包下创建User类： public class User { private Integer id; private String username; private String password; private Integer age; private String phone; private String email; // 补充SET/GET方法，toString()方法 } 注册功能应该由2项数据操作所组成：先根据用户尝试注册的用户名查询数据，如果查询到某个结果，则表示该用户名已经被占用，不允许插入新的用户数据，如果查询不到结果，则该用户名没有被人占用，将用户尝试注册的信息插入到数据库中即可！所以，涉及操作分别是根据用户名查询用户数据和插入用户数据。 先cn.tedu.sample包中创建UserMapper接口，并在接口中添加抽象方法： package cn.tedu.sample; public interface UserMapper { Integer addnew(User user); User findByUsername(String username); } 写完接口后，需要配置接口文件的位置，配置的做法可以是： 在接口的声明之前添加@Mapper注解，使用这种做法，就要求每一个接口都需要添加该注解； 在启动类（SampleApplication）的声明之前，添加@MapperScan(&quot;接口所在的包&quot;)注解，然后，所有接口都放在配置的包中即可！ 一般推荐使用以上的第2种做法，例如： @SpringBootApplication @MapperScan(\"cn.tedu.sample\") public class SampleApplication { public static void main(String[] args) { SpringApplication.run(SampleApplication.class, args); } } 接下来，就需要配置各抽象方法对应的SQL语句，首先，还是在src/main/resources下创建mappers文件夹，并在该文件中粘贴得到UserMapper.xml，用于配置SQL语句。 在UserMapper.xml中配置SQL语句： &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE mapper PUBLIC \"-//ibatis.apache.org//DTD Mapper 3.0//EN\" \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\"> &lt;mapper namespace=\"cn.tedu.sample.UserMapper\"> &lt;insert id=\"addnew\" useGeneratedKeys=\"true\" keyProperty=\"id\"> INSERT INTO t_user ( username, password, age, phone, email ) VALUES ( #{username}, #{password}, #{age}, #{phone}, #{email} ) &lt;/insert> &lt;select id=\"findByUsername\" resultType=\"cn.tedu.sample.User\"> SELECT * FROM t_user WHERE username=#{username} &lt;/select> &lt;/mapper> 在执行单元测试之前，还需要指定这些XML文件的位置，需要在application.properties中进行配置： mybatis.mapper-locations=classpath:mappers/*.xml最后，编写并执行单元测试： @RunWith(SpringRunner.class) @SpringBootTest public class SampleApplicationTests { @Test public void contextLoads() { } @Autowired private DataSource dataSource; @Autowired private UserMapper userMapper; @Test public void addnew() { User user = new User(); user.setUsername(\"lucy02\"); user.setPassword(\"123456\"); user.setAge(32); user.setPhone(\"13900139002\"); user.setEmail(\"lucy02@foxmail.com\"); Integer rows = userMapper.addnew(user); System.err.println(\"rows=\" + rows); System.err.println(user); } @Test public void findByUsername() { String username = \"lucy\"; User user = userMapper.findByUsername(username); System.err.println(user); } @Test public void getConnection() throws SQLException { System.err.println(dataSource.getConnection()); } } 至此，关于注册时涉及的数据库编程的相关功能就已经完成！ 其实，还可以在抽象方法之前添加注解来配置SQL语句及相关内容，例如： public interface UserMapper { @Insert(\"INSERT INTO t_user (username, password, age, phone, email) VALUES (#{username}, #{password}, #{age}, #{phone}, #{email})\") Integer addnew(User user); @Select(\"SELECT * FROM t_user WHERE username=#{username}\") User findByUsername(String username); } 这种做法也不是SpringBoot集成MyBatis才可以做到的，直接使用MyBatis也可以实现，但是，需要额外的配置，而SpringBoot已经完成了相关的配置，所以，可以直接使用！ 2.7. 开发处理注册的控制器首先，需要创建封装返回结果的JsonResult类，在类中声明需要响应到客户端的JSON数据中的属性： public class JsonResult { private Integer state; } 建议新创建UserController控制器类，在这个控制器类中处理请求： @RestController public class UserController { @Autowired private UserMapper userMapper; @RequestMapping(\"reg\") public JsonResult reg(User user) { User result = userMapper.findByUsername(user.getUsername()); if (result == null) { userMapper.addnew(user); return new JsonResult(1); } else { return new JsonResult(2); } } } 完成后，重新启动项目，在浏览器中访问http://localhost:8080/reg?username=david&amp;password=1234执行测试。 2.8. 前端页面先从前序项目中复制reg.html和jQuery文件到static文件夹下。 为注册的表单设置ID值： &lt;form id=\"form-reg\"> 修改按钮： &lt;input type=\"button\" onclick=\"reg()\" value=\"注册\" /> 然后，引用jQuery文件，并编写代码以提交请求、处理结果： &lt;script type=\"text/javascript\" src=\"jquery-3.4.1.min.js\">&lt;/script> &lt;script type=\"text/javascript\"> function reg() { $.ajax({ \"url\":\"/reg\", \"data\":$(\"#form-reg\").serialize(), \"type\":\"post\", \"dataType\":\"json\", \"success\":function (json) { if (json.state == 1) { alert(\"注册成功！\"); } else { alert(\"注册失败！您尝试注册的用户名已经被占用！\"); } } }); } &lt;/script>","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/categories/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/tags/SpringBoot/"}]},{"title":"今天都干什么了？","slug":"今天都干什么了？","date":"2020-05-06T14:05:36.000Z","updated":"2020-05-26T11:45:38.000Z","comments":true,"path":"archives/ab8a344f.html","link":"","permalink":"https://www.epsopn.top/archives/ab8a344f.html","excerpt":"今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌","text":"今天是无聊的一天，发呆的一天，为什么他们都折磨忙碌","categories":[{"name":"问号问号","slug":"问号问号","permalink":"https://www.epsopn.top/categories/%E9%97%AE%E5%8F%B7%E9%97%AE%E5%8F%B7/"}],"tags":[{"name":"许多的问号","slug":"许多的问号","permalink":"https://www.epsopn.top/tags/%E8%AE%B8%E5%A4%9A%E7%9A%84%E9%97%AE%E5%8F%B7/"}]},{"title":"Spring框架的介绍","slug":"Spring框架的介绍","date":"2020-05-05T15:32:57.000Z","updated":"2020-05-29T16:10:57.000Z","comments":true,"path":"archives/89a211cf.html","link":"","permalink":"https://www.epsopn.top/archives/89a211cf.html","excerpt":"1. Spring框架简介框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！ 在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！ Spring框架主要是用于创建对象和管理对象的！","text":"1. Spring框架简介框架：在具体的表现来看，是一系列的jar包文件，普通的jar包只是工具包，而框架更多的是解决了某些特定存在的问题，例如开发效率的问题、执行效率的问题、安全性的问题、代码的可维护性的问题等……使得开发人员在使用框架开发项目时，不必再关心这些问题，或者这些问题已经得到很大程度的缓解！在使用框架时，可能还需要遵循框架的特定使用方式来编程！ 在学习框架课程时，需要有一些“不求甚解”的心态，切不可尝试深度理解框架！更多的应该是掌握框架的正确使用方式，对框架的原理不要过度纠结！ Spring框架主要是用于创建对象和管理对象的！ 使用Spring框架的原因Spring框架的主要作用之一就是创建对象，但是，创建对象本身是一件非常简单的事情，例如： User user = new User(); 但是，在实际开发项目时，一个项目中的类会非常多，需要创建的对象也非常多，并且，类与类之间的依赖会比较复杂，如果直接创建对象，会导致耦合度较高，不利于项目的管理和维护！ Spring框架的优点都有什么？ 简化编程：Spring对JavaEE中的一些比较繁琐的API做了简化和封装，使用封装之后的API不仅代码更简洁，而且质量更高。 解耦：对象之间的依赖关系由容器来统一管理、降低了对象之间的耦合度、方便代码的维护，同时也实现了资源的统一调度和管理。 支持面向切面编程AOP：可以方便对程序添加通用的服务，比如事务、权限管理等。 集成其它框架：不发明重复的轮子，集成其它一些优秀框架、使开发者用统一的并且更加简洁的方式来使用这些框架。 轻量：可以依赖项目的实际要求，有选择的使用Spring框架的全部或者一部分。 2. 通过Spring框架创建对象，并从中获取所需的对象新建一个Maven Project，在创建过程中，勾选中Create a simple project选项，在Group Id一栏输入cn.tedu，在Artifact Id一栏输入spring01，下方的Packaging选择war，刚创建好的项目因为没有web.xml文件会报错，生成该文件即可。 在Packaing一栏也可以选择jar，并不一定必须选择war，后续会要求必须使用war，所以，提前体验也是可以的！ 打开项目的pom.xml文件，在其中添加Spring的依赖！在使用Spring框架时，需要添加的依赖是spring-context，具体代码是： &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.1.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 当需要查询某个依赖时，在浏览器中搜索“mvn”关键字，打开 http://www.mvnrepository.com 网站，并搜索依赖的名称，在查询结果中找到匹配度最高的依赖，选择版本，就可以查询到依赖的代码。 然后，将下载的Spring配置文件的压缩包解压，得到applicationContext.xml文件，这个文件就是Spring的配置文件，将它复制到项目的src/main/resources文件夹下！ 如果该文件提示错误，可以不处理，并不影响开发和运行！ 可以在Spring的配置文件中配置由Spring创建并管理的对象！ 假设需要由Spring创建一个Date类的对象，则在该文件中添加： &lt;!-- id属性：自定义名称，后续将根据这个名称来获取对象，推荐使用类名将首字母改为小写 --> &lt;!-- class属性：需要Spring框架创建哪个类的对象，取值是类的全名，即包名与类名 --> &lt;bean id=\"date\" class=\"java.util.Date\">&lt;/bean> 至此，已经配置好了需要由Spring管理的对象，后续，当该配置文件被加载时，Spring框架就会创建java.util.Date类的对象，开发人员也可以通过id属性值date获取该对象！","categories":[{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/categories/JavaSpring/"}],"tags":[{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/tags/JavaSpring/"}]},{"title":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置","slug":"访问被api域名白名单拒绝，请检查你的安全域名设置","date":"2020-05-04T02:39:40.000Z","updated":"2020-05-29T16:12:06.000Z","comments":true,"path":"archives/218fe6f9.html","link":"","permalink":"https://www.epsopn.top/archives/218fe6f9.html","excerpt":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置 大致情况： 刚刚用github成功解析了我的新域名，缺发现了这个错误 Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置.","text":"Valine出现Code 403 访问被api域名白名单拒绝，请检查你的安全域名设置 大致情况： 刚刚用github成功解析了我的新域名，缺发现了这个错误 Code 403: 访问被API域名白名单拒绝,请检查你的安全域名设置. 解决办法： 只需要在leancloud里面把你新的域名地址添加进来就ok了 在设置&gt;&gt;安全中心&gt;&gt;web安全域名 这样问题就解决了。","categories":[{"name":"遇到的问题","slug":"遇到的问题","permalink":"https://www.epsopn.top/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://www.epsopn.top/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"第一次搭建博客","slug":"第一个搭建博客","date":"2020-05-03T10:11:03.000Z","updated":"2020-05-29T16:12:40.000Z","comments":true,"path":"archives/5ff0b802.html","link":"","permalink":"https://www.epsopn.top/archives/5ff0b802.html","excerpt":"第一次搭建博客遇到的问题 身为小白的第一个搭建个人博客，中间的坑是在是太多了","text":"第一次搭建博客遇到的问题 身为小白的第一个搭建个人博客，中间的坑是在是太多了 由于对软件的不熟悉装载了node.js14.1.0版本导致了一直无法上传到git里面，查询了很多解决办法，因为是很新的版本，这个错误应该还没有遇到过。纠结了两天的时间，最后在群中得知，可能是版本过高导致，我又卸载装v12版本，果然两天没有搞定的错误就这样搞定了。 接下来的就比较好弄了，一步一步的尝试写来，稀里糊涂的就做了个差不多， 总结一句话： 不到万不得已，最后不要升级，毕竟bug太多，没有前人踩路，容易摔死","categories":[{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"}]}],"categories":[{"name":"日记","slug":"日记","permalink":"https://www.epsopn.top/categories/%E6%97%A5%E8%AE%B0/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/categories/SpringMVC/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/categories/SpringBoot/"},{"name":"问号问号","slug":"问号问号","permalink":"https://www.epsopn.top/categories/%E9%97%AE%E5%8F%B7%E9%97%AE%E5%8F%B7/"},{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/categories/JavaSpring/"},{"name":"遇到的问题","slug":"遇到的问题","permalink":"https://www.epsopn.top/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://www.epsopn.top/tags/%E5%BF%83%E5%BE%97/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.epsopn.top/tags/SpringMVC/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.epsopn.top/tags/SpringBoot/"},{"name":"许多的问号","slug":"许多的问号","permalink":"https://www.epsopn.top/tags/%E8%AE%B8%E5%A4%9A%E7%9A%84%E9%97%AE%E5%8F%B7/"},{"name":"JavaSpring","slug":"JavaSpring","permalink":"https://www.epsopn.top/tags/JavaSpring/"},{"name":"分享","slug":"分享","permalink":"https://www.epsopn.top/tags/%E5%88%86%E4%BA%AB/"}]}